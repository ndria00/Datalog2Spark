
// Generated from ASPCore2.g4 by ANTLR 4.10


#include "ASPCore2Listener.h"

#include "ASPCore2Parser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct ASPCore2ParserStaticData final {
  ASPCore2ParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  ASPCore2ParserStaticData(const ASPCore2ParserStaticData&) = delete;
  ASPCore2ParserStaticData(ASPCore2ParserStaticData&&) = delete;
  ASPCore2ParserStaticData& operator=(const ASPCore2ParserStaticData&) = delete;
  ASPCore2ParserStaticData& operator=(ASPCore2ParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

std::once_flag aspcore2ParserOnceFlag;
ASPCore2ParserStaticData *aspcore2ParserStaticData = nullptr;

void aspcore2ParserInitialize() {
  assert(aspcore2ParserStaticData == nullptr);
  auto staticData = std::make_unique<ASPCore2ParserStaticData>(
    std::vector<std::string>{
      "program", "rule_", "simple_rule", "head", "body", "weight_at_levels", 
      "levels_and_terms", "disjunction", "conjunction", "choice_atom", "lower_guard", 
      "upper_guard", "choice_elements", "choice_element", "choice_element_atom", 
      "choice_elements_literals", "naf_literals", "naf_literal", "naf_literal_aggregate", 
      "existential_atom", "classic_literal", "atom", "extAtom", "extSemicol", 
      "terms", "basic_terms", "builtin_atom", "compareop", "binop", "arithop1", 
      "arithop2", "term_", "term__", "term", "expr", "factor", "basic_term", 
      "ground_term", "variable_term", "functional_term", "vars", "identifier", 
      "directive", "directive_types", "directive_val", "query", "lower_guard_compare_aggregate", 
      "upper_guard_compare_aggregate", "compare_aggregate", "lower_guard_leftward_left_aggregate", 
      "leftward_left_aggregate", "left_aggregate", "lower_guard_rightward_left_aggregate", 
      "rightward_left_aggregate", "upper_guard_leftward_right_aggregate", 
      "upper_guard_rightward_right_aggregate", "right_aggregate", "aggregate_atom", 
      "leftwardop", "rightwardop", "aggregate", "aggregate_elements", "aggregate_element", 
      "aggregate_function", "annotation_global", "annotations_rule", "annotation_rule", 
      "annotation_rule_to_decompose", "annotation_rule_to_not_decompose", 
      "annotation_rule_ordering", "annotation_global_ordering", "annotation_global_extatom_conversion", 
      "annotation_extpredicate", "extatom_conv_types", "extatom_conv_type", 
      "rule_ordering_type", "global_ordering_type", "annotation_rule_atom_indexed", 
      "annotation_global_atom_indexed", "rule_indexing_arguments", "rule_naf_literal_annotation", 
      "global_indexing_arguments", "global_naf_literal_annotation", "rule_atom_annotation_before", 
      "global_atom_annotation_before", "rule_atom_annotation_after", "global_atom_annotation_after", 
      "rule_atoms_annotation_before", "global_atoms_annotation_before", 
      "rule_atoms_annotation_after", "global_atoms_annotation_after", "annotation_rule_partial_order_begin", 
      "annotation_global_partial_order_begin", "annotation_rule_partial_order", 
      "annotation_global_partial_order", "annotation_rule_projection", "annotation_rule_projection_value", 
      "annotation_rule_rewriting_arith", "annotation_rule_align_substitutions", 
      "annotation_rule_look_ahead", "annotation_global_wasp_propagator", 
      "annotation_global_wasp_propagator_begin", "annotation_global_wasp_heuristic", 
      "annotation_global_wasp_heuristic_begin", "heuristic_python_file", 
      "aggregate_element_heuristic", "aggregate_elements_heuristic"
    },
    std::vector<std::string>{
      "", "'not'", "'#type'", "'int'", "'string'", "", "", "", "", "", "'.'", 
      "'..'", "','", "'|'", "';'", "':'", "'@'", "':-'", "':~'", "'+'", 
      "'-'", "'*'", "'/'", "'\\'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
      "'\\u003F'", "'_'", "", "", "'<'", "'>'", "'<='", "'>='", "'&'", "'\\E'", 
      "'#count'", "'#max'", "'#min'", "'#sum'", "'#propagator'", "'%@rule_align_substitutions'", 
      "'%@rule_look_ahead'", "'%@rule_projection'", "'%@rule_rewriting_arith'", 
      "'%@rule_ordering'", "'@value'", "'%@rule_atom_indexed'", "'@atom'", 
      "'@arguments'", "'%@rule_partial_order'", "'@before'", "'@after'", 
      "'@predicate'", "'@type'", "'@Q_CONST'", "'@CONST'", "'@U_INT'", "'@UR_INT'", 
      "'@UT_INT'", "'@R_INT'", "'@T_INT'", "'%@global_ordering'", "'%@global_atom_indexed'", 
      "'%@global_partial_order'", "'%@global_external_predicate_conversion'", 
      "'%@rule_to_decompose'", "'%@rule_to_not_decompose'", "'%@global_heuristic'", 
      "'@file'", "'@elements'"
    },
    std::vector<std::string>{
      "", "NAF", "DIRECTIVE_NAME", "DIRECTIVE_VALUE_INT", "DIRECTIVE_VALUE_STRING", 
      "SYMBOLIC_CONSTANT", "VARIABLE", "STRING", "NUMBER", "WS", "DOT", 
      "DDOT", "COMMA", "HEAD_SEPARATOR", "SEMICOLON", "COLON", "AT", "CONS", 
      "WCONS", "PLUS", "DASH", "TIMES", "SLASH", "BACK_SLASH", "PARAM_OPEN", 
      "PARAM_CLOSE", "SQUARE_OPEN", "SQUARE_CLOSED", "CURLY_OPEN", "CURLY_CLOSE", 
      "QUERY_MARK", "ANON_VAR", "EQUAL", "UNEQUAL", "LESS", "GREATER", "LESS_OR_EQ", 
      "GREATER_OR_EQ", "AMPERSAND", "EXISTS", "AGGR_COUNT", "AGGR_MAX", 
      "AGGR_MIN", "AGGR_SUM", "ANNOTATION_GLOBAL_WASP_PROPAGATOR", "ANNOTATION_RULE_ALIGN_SUBSTITUTIONS", 
      "ANNOTATION_RULE_LOOK_AHEAD", "ANNOTATION_RULE_PROJECTION", "ANNOTATION_RULE_REWRITING_ARITH", 
      "ANNOTATION_RULE_ORDERING", "ANNOTATION_ORDERING_VALUE", "ANNOTATION_RULE_ATOM_INDEXED", 
      "ANNOTATION_ATOM_INDEXED_ATOM", "ANNOTATION_ATOM_INDEXED_ARGUMENTS", 
      "ANNOTATION_RULE_PARTIAL_ORDER", "ANNOTATION_PARTIAL_ORDER_BEFORE", 
      "ANNOTATION_PARTIAL_ORDER_AFTER", "ANNOTATION_EXTATOM_PREDICATE", 
      "ANNOTATION_EXTATOM_TYPE", "ANNOTATION_EXTATOM_TYPE_QCONST", "ANNOTATION_EXTATOM_TYPE_CONST", 
      "ANNOTATION_EXTATOM_TYPE_U_INT", "ANNOTATION_EXTATOM_TYPE_UR_INT", 
      "ANNOTATION_EXTATOM_TYPE_UT_INT", "ANNOTATION_EXTATOM_TYPE_R_INT", 
      "ANNOTATION_EXTATOM_TYPE_T_INT", "ANNOTATION_GLOBAL_ORDERING", "ANNOTATION_GLOBAL_ATOM_INDEXED", 
      "ANNOTATION_GLOBAL_PARTIAL_ORDER", "ANNOTATION_GLOBAL_EXTATOM_CONVERSION", 
      "ANNOTATION_RULE_TO_DECOMPOSE", "ANNOTATION_RULE_TO_NOT_DECOMPOSE", 
      "ANNOTATION_GLOBAL_WASP_HEURISTIC", "ANNOTATION_GLOBAL_WASP_HEURISTIC_FILE", 
      "ANNOTATION_GLOBAL_WASP_HEURISTIC_ELEMENTS", "EMPTY_COMMENT", "COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,76,1035,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
  	7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
  	14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
  	21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
  	28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
  	35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
  	42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,
  	49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,
  	56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
  	63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,
  	70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,
  	77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,
  	84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
  	91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,
  	98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,
  	104,2,105,7,105,2,106,7,106,1,0,5,0,216,8,0,10,0,12,0,219,9,0,1,1,1,1,
  	1,1,1,1,1,1,1,1,3,1,227,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
  	2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,251,8,2,1,3,1,3,3,3,
  	255,8,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,268,8,5,1,6,1,
  	6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,279,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
  	1,7,1,7,1,7,3,7,291,8,7,1,8,1,8,1,8,1,8,1,8,3,8,298,8,8,1,9,1,9,1,9,1,
  	9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,
  	320,8,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,3,12,333,
  	8,12,1,13,1,13,1,13,1,13,1,13,3,13,340,8,13,1,14,1,14,1,15,1,15,1,15,
  	1,15,1,15,3,15,349,8,15,1,16,1,16,1,16,1,16,1,16,3,16,356,8,16,1,17,1,
  	17,1,17,1,17,1,17,1,17,1,17,3,17,365,8,17,1,18,1,18,1,18,1,18,3,18,371,
  	8,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,3,20,380,8,20,1,21,1,21,1,21,
  	1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,392,8,21,1,22,1,22,1,22,1,22,
  	1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
  	1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,421,8,22,1,23,1,23,
  	1,24,1,24,1,24,1,24,1,24,3,24,430,8,24,1,25,1,25,1,25,1,25,1,25,3,25,
  	437,8,25,1,26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,28,3,28,449,8,
  	28,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
  	31,1,31,3,31,466,8,31,1,32,1,32,1,32,1,32,1,32,1,32,3,32,474,8,32,1,33,
  	1,33,1,33,3,33,479,8,33,1,34,1,34,1,34,1,34,1,34,3,34,486,8,34,1,35,1,
  	35,1,35,1,35,1,35,3,35,493,8,35,1,36,1,36,1,36,3,36,498,8,36,1,37,1,37,
  	1,37,1,37,1,37,3,37,505,8,37,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,40,
  	1,40,1,40,1,40,3,40,518,8,40,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,
  	1,42,1,43,1,43,1,43,1,43,1,43,3,43,534,8,43,1,44,1,44,1,45,1,45,1,45,
  	1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,3,48,553,
  	8,48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,3,51,563,8,51,1,52,1,52,
  	1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,56,1,56,
  	1,56,1,56,3,56,583,8,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
  	3,57,594,8,57,1,58,1,58,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
  	1,60,1,60,3,60,609,8,60,1,61,1,61,1,61,1,61,1,61,3,61,616,8,61,1,62,1,
  	62,1,62,1,62,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,3,64,630,8,64,1,
  	65,1,65,1,65,1,65,3,65,636,8,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,
  	66,1,66,3,66,647,8,66,1,67,1,67,1,67,1,67,1,67,1,67,3,67,655,8,67,1,68,
  	1,68,1,68,1,68,1,68,1,68,3,68,663,8,68,1,69,1,69,1,69,1,69,1,69,1,69,
  	1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,679,8,69,1,70,1,70,1,70,
  	1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,695,8,70,
  	1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,72,1,72,
  	1,72,1,73,1,73,1,73,1,73,1,73,3,73,717,8,73,1,74,1,74,1,75,1,75,1,76,
  	1,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
  	1,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,
  	1,78,1,79,1,79,1,79,1,79,3,79,757,8,79,1,80,1,80,1,80,3,80,762,8,80,1,
  	81,1,81,1,81,1,81,3,81,768,8,81,1,82,1,82,1,82,3,82,773,8,82,1,83,1,83,
  	1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,785,8,83,1,84,1,84,1,84,
  	1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,797,8,84,1,85,1,85,1,85,1,85,
  	1,85,1,85,1,85,1,85,1,85,1,85,3,85,809,8,85,1,86,1,86,1,86,1,86,1,86,
  	1,86,1,86,1,86,1,86,1,86,3,86,821,8,86,1,87,1,87,1,87,1,87,1,87,3,87,
  	828,8,87,1,88,1,88,1,88,1,88,1,88,3,88,835,8,88,1,89,1,89,1,89,1,89,1,
  	89,3,89,842,8,89,1,90,1,90,1,90,1,90,1,90,1,90,3,90,850,8,90,1,91,1,91,
  	1,92,1,92,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,
  	1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,
  	1,93,1,93,1,93,1,93,1,93,1,93,3,93,888,8,93,1,94,1,94,1,94,1,94,1,94,
  	1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
  	1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,
  	922,8,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,96,1,96,1,97,1,97,
  	1,97,1,97,1,97,1,97,3,97,940,8,97,1,98,1,98,1,98,1,98,1,98,1,98,3,98,
  	948,8,98,1,99,1,99,1,99,1,99,1,99,1,99,3,99,956,8,99,1,100,1,100,1,100,
  	1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,
  	1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,
  	1,100,3,100,986,8,100,1,101,1,101,1,102,1,102,1,102,1,102,1,102,1,102,
  	1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
  	1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,1018,
  	8,102,1,103,1,103,1,104,1,104,1,105,1,105,3,105,1026,8,105,1,106,1,106,
  	1,106,1,106,1,106,3,106,1033,8,106,1,106,0,0,107,0,2,4,6,8,10,12,14,16,
  	18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
  	64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
  	108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
  	144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
  	180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,0,
  	10,1,0,32,33,1,0,19,20,1,0,21,23,2,0,6,6,31,31,1,0,5,7,1,0,3,4,2,0,34,
  	34,36,36,2,0,35,35,37,37,1,0,40,43,1,0,59,65,1053,0,217,1,0,0,0,2,226,
  	1,0,0,0,4,250,1,0,0,0,6,254,1,0,0,0,8,256,1,0,0,0,10,267,1,0,0,0,12,278,
  	1,0,0,0,14,290,1,0,0,0,16,297,1,0,0,0,18,319,1,0,0,0,20,321,1,0,0,0,22,
  	324,1,0,0,0,24,332,1,0,0,0,26,339,1,0,0,0,28,341,1,0,0,0,30,348,1,0,0,
  	0,32,355,1,0,0,0,34,364,1,0,0,0,36,370,1,0,0,0,38,372,1,0,0,0,40,379,
  	1,0,0,0,42,391,1,0,0,0,44,420,1,0,0,0,46,422,1,0,0,0,48,429,1,0,0,0,50,
  	436,1,0,0,0,52,438,1,0,0,0,54,442,1,0,0,0,56,448,1,0,0,0,58,450,1,0,0,
  	0,60,452,1,0,0,0,62,465,1,0,0,0,64,473,1,0,0,0,66,478,1,0,0,0,68,485,
  	1,0,0,0,70,492,1,0,0,0,72,497,1,0,0,0,74,504,1,0,0,0,76,506,1,0,0,0,78,
  	508,1,0,0,0,80,517,1,0,0,0,82,519,1,0,0,0,84,521,1,0,0,0,86,533,1,0,0,
  	0,88,535,1,0,0,0,90,537,1,0,0,0,92,540,1,0,0,0,94,543,1,0,0,0,96,552,
  	1,0,0,0,98,554,1,0,0,0,100,557,1,0,0,0,102,562,1,0,0,0,104,564,1,0,0,
  	0,106,567,1,0,0,0,108,570,1,0,0,0,110,573,1,0,0,0,112,582,1,0,0,0,114,
  	593,1,0,0,0,116,595,1,0,0,0,118,597,1,0,0,0,120,608,1,0,0,0,122,615,1,
  	0,0,0,124,617,1,0,0,0,126,621,1,0,0,0,128,629,1,0,0,0,130,635,1,0,0,0,
  	132,646,1,0,0,0,134,654,1,0,0,0,136,662,1,0,0,0,138,678,1,0,0,0,140,694,
  	1,0,0,0,142,696,1,0,0,0,144,708,1,0,0,0,146,716,1,0,0,0,148,718,1,0,0,
  	0,150,720,1,0,0,0,152,722,1,0,0,0,154,724,1,0,0,0,156,738,1,0,0,0,158,
  	756,1,0,0,0,160,761,1,0,0,0,162,767,1,0,0,0,164,772,1,0,0,0,166,784,1,
  	0,0,0,168,796,1,0,0,0,170,808,1,0,0,0,172,820,1,0,0,0,174,827,1,0,0,0,
  	176,834,1,0,0,0,178,841,1,0,0,0,180,849,1,0,0,0,182,851,1,0,0,0,184,853,
  	1,0,0,0,186,887,1,0,0,0,188,921,1,0,0,0,190,923,1,0,0,0,192,931,1,0,0,
  	0,194,939,1,0,0,0,196,947,1,0,0,0,198,955,1,0,0,0,200,985,1,0,0,0,202,
  	987,1,0,0,0,204,1017,1,0,0,0,206,1019,1,0,0,0,208,1021,1,0,0,0,210,1025,
  	1,0,0,0,212,1032,1,0,0,0,214,216,3,2,1,0,215,214,1,0,0,0,216,219,1,0,
  	0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,1,1,0,0,0,219,217,1,0,0,0,220,
  	227,3,4,2,0,221,222,3,130,65,0,222,223,3,4,2,0,223,227,1,0,0,0,224,227,
  	3,128,64,0,225,227,3,84,42,0,226,220,1,0,0,0,226,221,1,0,0,0,226,224,
  	1,0,0,0,226,225,1,0,0,0,227,3,1,0,0,0,228,229,3,6,3,0,229,230,5,10,0,
  	0,230,251,1,0,0,0,231,232,3,6,3,0,232,233,5,17,0,0,233,234,5,10,0,0,234,
  	251,1,0,0,0,235,236,3,6,3,0,236,237,5,17,0,0,237,238,3,8,4,0,238,239,
  	5,10,0,0,239,251,1,0,0,0,240,241,5,17,0,0,241,242,3,8,4,0,242,243,5,10,
  	0,0,243,251,1,0,0,0,244,245,5,18,0,0,245,246,3,8,4,0,246,247,5,10,0,0,
  	247,248,3,10,5,0,248,251,1,0,0,0,249,251,3,90,45,0,250,228,1,0,0,0,250,
  	231,1,0,0,0,250,235,1,0,0,0,250,240,1,0,0,0,250,244,1,0,0,0,250,249,1,
  	0,0,0,251,5,1,0,0,0,252,255,3,14,7,0,253,255,3,18,9,0,254,252,1,0,0,0,
  	254,253,1,0,0,0,255,7,1,0,0,0,256,257,3,16,8,0,257,9,1,0,0,0,258,259,
  	5,26,0,0,259,260,3,66,33,0,260,261,5,27,0,0,261,268,1,0,0,0,262,263,5,
  	26,0,0,263,264,3,66,33,0,264,265,3,12,6,0,265,266,5,27,0,0,266,268,1,
  	0,0,0,267,258,1,0,0,0,267,262,1,0,0,0,268,11,1,0,0,0,269,270,5,16,0,0,
  	270,279,3,66,33,0,271,272,5,16,0,0,272,273,3,66,33,0,273,274,5,12,0,0,
  	274,275,3,48,24,0,275,279,1,0,0,0,276,277,5,12,0,0,277,279,3,48,24,0,
  	278,269,1,0,0,0,278,271,1,0,0,0,278,276,1,0,0,0,279,13,1,0,0,0,280,291,
  	3,40,20,0,281,282,3,40,20,0,282,283,5,13,0,0,283,284,3,14,7,0,284,291,
  	1,0,0,0,285,291,3,38,19,0,286,287,3,38,19,0,287,288,5,13,0,0,288,289,
  	3,14,7,0,289,291,1,0,0,0,290,280,1,0,0,0,290,281,1,0,0,0,290,285,1,0,
  	0,0,290,286,1,0,0,0,291,15,1,0,0,0,292,298,3,36,18,0,293,294,3,36,18,
  	0,294,295,5,12,0,0,295,296,3,16,8,0,296,298,1,0,0,0,297,292,1,0,0,0,297,
  	293,1,0,0,0,298,17,1,0,0,0,299,300,3,20,10,0,300,301,5,28,0,0,301,302,
  	3,24,12,0,302,303,5,29,0,0,303,304,3,22,11,0,304,320,1,0,0,0,305,306,
  	3,20,10,0,306,307,5,28,0,0,307,308,3,24,12,0,308,309,5,29,0,0,309,320,
  	1,0,0,0,310,311,5,28,0,0,311,312,3,24,12,0,312,313,5,29,0,0,313,320,1,
  	0,0,0,314,315,5,28,0,0,315,316,3,24,12,0,316,317,5,29,0,0,317,318,3,22,
  	11,0,318,320,1,0,0,0,319,299,1,0,0,0,319,305,1,0,0,0,319,310,1,0,0,0,
  	319,314,1,0,0,0,320,19,1,0,0,0,321,322,3,66,33,0,322,323,3,56,28,0,323,
  	21,1,0,0,0,324,325,3,56,28,0,325,326,3,66,33,0,326,23,1,0,0,0,327,328,
  	3,26,13,0,328,329,5,14,0,0,329,330,3,24,12,0,330,333,1,0,0,0,331,333,
  	3,26,13,0,332,327,1,0,0,0,332,331,1,0,0,0,333,25,1,0,0,0,334,340,3,28,
  	14,0,335,336,3,28,14,0,336,337,5,15,0,0,337,338,3,30,15,0,338,340,1,0,
  	0,0,339,334,1,0,0,0,339,335,1,0,0,0,340,27,1,0,0,0,341,342,3,42,21,0,
  	342,29,1,0,0,0,343,349,3,34,17,0,344,345,3,32,16,0,345,346,5,12,0,0,346,
  	347,3,34,17,0,347,349,1,0,0,0,348,343,1,0,0,0,348,344,1,0,0,0,349,31,
  	1,0,0,0,350,356,3,34,17,0,351,352,3,34,17,0,352,353,5,12,0,0,353,354,
  	3,32,16,0,354,356,1,0,0,0,355,350,1,0,0,0,355,351,1,0,0,0,356,33,1,0,
  	0,0,357,365,3,40,20,0,358,359,5,1,0,0,359,365,3,40,20,0,360,365,3,52,
  	26,0,361,365,3,44,22,0,362,363,5,1,0,0,363,365,3,44,22,0,364,357,1,0,
  	0,0,364,358,1,0,0,0,364,360,1,0,0,0,364,361,1,0,0,0,364,362,1,0,0,0,365,
  	35,1,0,0,0,366,371,3,34,17,0,367,371,3,114,57,0,368,369,5,1,0,0,369,371,
  	3,114,57,0,370,366,1,0,0,0,370,367,1,0,0,0,370,368,1,0,0,0,371,37,1,0,
  	0,0,372,373,5,39,0,0,373,374,3,80,40,0,374,375,3,42,21,0,375,39,1,0,0,
  	0,376,380,3,42,21,0,377,378,5,20,0,0,378,380,3,42,21,0,379,376,1,0,0,
  	0,379,377,1,0,0,0,380,41,1,0,0,0,381,392,3,82,41,0,382,383,3,82,41,0,
  	383,384,5,24,0,0,384,385,3,48,24,0,385,386,5,25,0,0,386,392,1,0,0,0,387,
  	388,3,82,41,0,388,389,5,24,0,0,389,390,5,25,0,0,390,392,1,0,0,0,391,381,
  	1,0,0,0,391,382,1,0,0,0,391,387,1,0,0,0,392,43,1,0,0,0,393,394,5,38,0,
  	0,394,395,3,82,41,0,395,396,5,24,0,0,396,397,3,48,24,0,397,398,3,46,23,
  	0,398,399,3,48,24,0,399,400,5,25,0,0,400,421,1,0,0,0,401,402,5,38,0,0,
  	402,403,3,82,41,0,403,404,5,24,0,0,404,405,3,46,23,0,405,406,3,48,24,
  	0,406,407,5,25,0,0,407,421,1,0,0,0,408,409,5,38,0,0,409,410,3,82,41,0,
  	410,411,5,24,0,0,411,412,3,48,24,0,412,413,3,46,23,0,413,414,5,25,0,0,
  	414,421,1,0,0,0,415,416,5,38,0,0,416,417,3,82,41,0,417,418,5,24,0,0,418,
  	419,5,25,0,0,419,421,1,0,0,0,420,393,1,0,0,0,420,401,1,0,0,0,420,408,
  	1,0,0,0,420,415,1,0,0,0,421,45,1,0,0,0,422,423,5,14,0,0,423,47,1,0,0,
  	0,424,430,3,66,33,0,425,426,3,66,33,0,426,427,5,12,0,0,427,428,3,48,24,
  	0,428,430,1,0,0,0,429,424,1,0,0,0,429,425,1,0,0,0,430,49,1,0,0,0,431,
  	437,3,72,36,0,432,433,3,72,36,0,433,434,5,12,0,0,434,435,3,50,25,0,435,
  	437,1,0,0,0,436,431,1,0,0,0,436,432,1,0,0,0,437,51,1,0,0,0,438,439,3,
  	66,33,0,439,440,3,56,28,0,440,441,3,66,33,0,441,53,1,0,0,0,442,443,7,
  	0,0,0,443,55,1,0,0,0,444,449,3,54,27,0,445,449,3,54,27,0,446,449,3,116,
  	58,0,447,449,3,118,59,0,448,444,1,0,0,0,448,445,1,0,0,0,448,446,1,0,0,
  	0,448,447,1,0,0,0,449,57,1,0,0,0,450,451,7,1,0,0,451,59,1,0,0,0,452,453,
  	7,2,0,0,453,61,1,0,0,0,454,466,5,31,0,0,455,456,3,82,41,0,456,457,5,24,
  	0,0,457,458,3,48,24,0,458,459,5,25,0,0,459,466,1,0,0,0,460,461,5,8,0,
  	0,461,462,5,11,0,0,462,466,5,8,0,0,463,464,5,20,0,0,464,466,3,66,33,0,
  	465,454,1,0,0,0,465,455,1,0,0,0,465,460,1,0,0,0,465,463,1,0,0,0,466,63,
  	1,0,0,0,467,474,3,82,41,0,468,474,5,8,0,0,469,470,5,24,0,0,470,471,3,
  	66,33,0,471,472,5,25,0,0,472,474,1,0,0,0,473,467,1,0,0,0,473,468,1,0,
  	0,0,473,469,1,0,0,0,474,65,1,0,0,0,475,479,3,62,31,0,476,479,3,82,41,
  	0,477,479,3,68,34,0,478,475,1,0,0,0,478,476,1,0,0,0,478,477,1,0,0,0,479,
  	67,1,0,0,0,480,486,3,70,35,0,481,482,3,70,35,0,482,483,3,58,29,0,483,
  	484,3,68,34,0,484,486,1,0,0,0,485,480,1,0,0,0,485,481,1,0,0,0,486,69,
  	1,0,0,0,487,493,3,64,32,0,488,489,3,64,32,0,489,490,3,60,30,0,490,491,
  	3,70,35,0,491,493,1,0,0,0,492,487,1,0,0,0,492,488,1,0,0,0,493,71,1,0,
  	0,0,494,498,3,74,37,0,495,498,3,76,38,0,496,498,3,78,39,0,497,494,1,0,
  	0,0,497,495,1,0,0,0,497,496,1,0,0,0,498,73,1,0,0,0,499,505,5,5,0,0,500,
  	505,5,7,0,0,501,505,5,8,0,0,502,503,5,20,0,0,503,505,5,8,0,0,504,499,
  	1,0,0,0,504,500,1,0,0,0,504,501,1,0,0,0,504,502,1,0,0,0,505,75,1,0,0,
  	0,506,507,7,3,0,0,507,77,1,0,0,0,508,509,3,82,41,0,509,510,5,24,0,0,510,
  	511,3,48,24,0,511,512,5,25,0,0,512,79,1,0,0,0,513,518,5,6,0,0,514,515,
  	5,6,0,0,515,516,5,12,0,0,516,518,3,80,40,0,517,513,1,0,0,0,517,514,1,
  	0,0,0,518,81,1,0,0,0,519,520,7,4,0,0,520,83,1,0,0,0,521,522,5,2,0,0,522,
  	523,5,5,0,0,523,524,5,24,0,0,524,525,3,86,43,0,525,526,5,25,0,0,526,527,
  	5,10,0,0,527,85,1,0,0,0,528,534,3,88,44,0,529,530,3,88,44,0,530,531,5,
  	12,0,0,531,532,3,86,43,0,532,534,1,0,0,0,533,528,1,0,0,0,533,529,1,0,
  	0,0,534,87,1,0,0,0,535,536,7,5,0,0,536,89,1,0,0,0,537,538,3,42,21,0,538,
  	539,5,30,0,0,539,91,1,0,0,0,540,541,3,66,33,0,541,542,3,54,27,0,542,93,
  	1,0,0,0,543,544,3,54,27,0,544,545,3,66,33,0,545,95,1,0,0,0,546,547,3,
  	92,46,0,547,548,3,120,60,0,548,553,1,0,0,0,549,550,3,120,60,0,550,551,
  	3,94,47,0,551,553,1,0,0,0,552,546,1,0,0,0,552,549,1,0,0,0,553,97,1,0,
  	0,0,554,555,3,66,33,0,555,556,3,116,58,0,556,99,1,0,0,0,557,558,3,98,
  	49,0,558,559,3,120,60,0,559,101,1,0,0,0,560,563,3,100,50,0,561,563,3,
  	106,53,0,562,560,1,0,0,0,562,561,1,0,0,0,563,103,1,0,0,0,564,565,3,66,
  	33,0,565,566,3,118,59,0,566,105,1,0,0,0,567,568,3,104,52,0,568,569,3,
  	120,60,0,569,107,1,0,0,0,570,571,3,116,58,0,571,572,3,66,33,0,572,109,
  	1,0,0,0,573,574,3,118,59,0,574,575,3,66,33,0,575,111,1,0,0,0,576,577,
  	3,120,60,0,577,578,3,108,54,0,578,583,1,0,0,0,579,580,3,120,60,0,580,
  	581,3,110,55,0,581,583,1,0,0,0,582,576,1,0,0,0,582,579,1,0,0,0,583,113,
  	1,0,0,0,584,594,3,102,51,0,585,594,3,112,56,0,586,594,3,96,48,0,587,588,
  	3,100,50,0,588,589,3,108,54,0,589,594,1,0,0,0,590,591,3,106,53,0,591,
  	592,3,110,55,0,592,594,1,0,0,0,593,584,1,0,0,0,593,585,1,0,0,0,593,586,
  	1,0,0,0,593,587,1,0,0,0,593,590,1,0,0,0,594,115,1,0,0,0,595,596,7,6,0,
  	0,596,117,1,0,0,0,597,598,7,7,0,0,598,119,1,0,0,0,599,600,3,126,63,0,
  	600,601,5,28,0,0,601,602,3,122,61,0,602,603,5,29,0,0,603,609,1,0,0,0,
  	604,605,3,126,63,0,605,606,5,28,0,0,606,607,5,29,0,0,607,609,1,0,0,0,
  	608,599,1,0,0,0,608,604,1,0,0,0,609,121,1,0,0,0,610,611,3,124,62,0,611,
  	612,5,14,0,0,612,613,3,122,61,0,613,616,1,0,0,0,614,616,3,124,62,0,615,
  	610,1,0,0,0,615,614,1,0,0,0,616,123,1,0,0,0,617,618,3,50,25,0,618,619,
  	5,15,0,0,619,620,3,32,16,0,620,125,1,0,0,0,621,622,7,8,0,0,622,127,1,
  	0,0,0,623,630,3,140,70,0,624,630,3,156,78,0,625,630,3,188,94,0,626,630,
  	3,142,71,0,627,630,3,204,102,0,628,630,3,200,100,0,629,623,1,0,0,0,629,
  	624,1,0,0,0,629,625,1,0,0,0,629,626,1,0,0,0,629,627,1,0,0,0,629,628,1,
  	0,0,0,630,129,1,0,0,0,631,636,3,132,66,0,632,633,3,132,66,0,633,634,3,
  	130,65,0,634,636,1,0,0,0,635,631,1,0,0,0,635,632,1,0,0,0,636,131,1,0,
  	0,0,637,647,3,138,69,0,638,647,3,154,77,0,639,647,3,186,93,0,640,647,
  	3,190,95,0,641,647,3,194,97,0,642,647,3,196,98,0,643,647,3,198,99,0,644,
  	647,3,134,67,0,645,647,3,136,68,0,646,637,1,0,0,0,646,638,1,0,0,0,646,
  	639,1,0,0,0,646,640,1,0,0,0,646,641,1,0,0,0,646,642,1,0,0,0,646,643,1,
  	0,0,0,646,644,1,0,0,0,646,645,1,0,0,0,647,133,1,0,0,0,648,649,5,70,0,
  	0,649,650,5,24,0,0,650,651,5,25,0,0,651,655,5,10,0,0,652,653,5,70,0,0,
  	653,655,5,10,0,0,654,648,1,0,0,0,654,652,1,0,0,0,655,135,1,0,0,0,656,
  	657,5,71,0,0,657,658,5,24,0,0,658,659,5,25,0,0,659,663,5,10,0,0,660,661,
  	5,71,0,0,661,663,5,10,0,0,662,656,1,0,0,0,662,660,1,0,0,0,663,137,1,0,
  	0,0,664,665,5,49,0,0,665,666,5,24,0,0,666,667,5,50,0,0,667,668,5,32,0,
  	0,668,669,3,150,75,0,669,670,5,25,0,0,670,671,5,10,0,0,671,679,1,0,0,
  	0,672,673,5,49,0,0,673,674,5,24,0,0,674,675,3,150,75,0,675,676,5,25,0,
  	0,676,677,5,10,0,0,677,679,1,0,0,0,678,664,1,0,0,0,678,672,1,0,0,0,679,
  	139,1,0,0,0,680,681,5,66,0,0,681,682,5,24,0,0,682,683,5,50,0,0,683,684,
  	5,32,0,0,684,685,3,152,76,0,685,686,5,25,0,0,686,687,5,10,0,0,687,695,
  	1,0,0,0,688,689,5,66,0,0,689,690,5,24,0,0,690,691,3,152,76,0,691,692,
  	5,25,0,0,692,693,5,10,0,0,693,695,1,0,0,0,694,680,1,0,0,0,694,688,1,0,
  	0,0,695,141,1,0,0,0,696,697,5,69,0,0,697,698,5,24,0,0,698,699,5,57,0,
  	0,699,700,5,32,0,0,700,701,3,144,72,0,701,702,5,12,0,0,702,703,5,58,0,
  	0,703,704,5,32,0,0,704,705,3,146,73,0,705,706,5,25,0,0,706,707,5,10,0,
  	0,707,143,1,0,0,0,708,709,5,38,0,0,709,710,3,82,41,0,710,145,1,0,0,0,
  	711,717,3,148,74,0,712,713,3,148,74,0,713,714,5,12,0,0,714,715,3,146,
  	73,0,715,717,1,0,0,0,716,711,1,0,0,0,716,712,1,0,0,0,717,147,1,0,0,0,
  	718,719,7,9,0,0,719,149,1,0,0,0,720,721,5,8,0,0,721,151,1,0,0,0,722,723,
  	5,8,0,0,723,153,1,0,0,0,724,725,5,51,0,0,725,726,5,24,0,0,726,727,5,52,
  	0,0,727,728,5,32,0,0,728,729,3,160,80,0,729,730,5,12,0,0,730,731,5,53,
  	0,0,731,732,5,32,0,0,732,733,5,28,0,0,733,734,3,158,79,0,734,735,5,29,
  	0,0,735,736,5,25,0,0,736,737,5,10,0,0,737,155,1,0,0,0,738,739,5,67,0,
  	0,739,740,5,24,0,0,740,741,5,52,0,0,741,742,5,32,0,0,742,743,3,164,82,
  	0,743,744,5,12,0,0,744,745,5,53,0,0,745,746,5,32,0,0,746,747,5,28,0,0,
  	747,748,3,162,81,0,748,749,5,29,0,0,749,750,5,25,0,0,750,751,5,10,0,0,
  	751,157,1,0,0,0,752,757,5,8,0,0,753,754,5,8,0,0,754,755,5,12,0,0,755,
  	757,3,158,79,0,756,752,1,0,0,0,756,753,1,0,0,0,757,159,1,0,0,0,758,762,
  	3,40,20,0,759,760,5,1,0,0,760,762,3,40,20,0,761,758,1,0,0,0,761,759,1,
  	0,0,0,762,161,1,0,0,0,763,768,5,8,0,0,764,765,5,8,0,0,765,766,5,12,0,
  	0,766,768,3,162,81,0,767,763,1,0,0,0,767,764,1,0,0,0,768,163,1,0,0,0,
  	769,773,3,40,20,0,770,771,5,1,0,0,771,773,3,40,20,0,772,769,1,0,0,0,772,
  	770,1,0,0,0,773,165,1,0,0,0,774,785,3,40,20,0,775,776,5,1,0,0,776,785,
  	3,40,20,0,777,785,3,52,26,0,778,785,3,114,57,0,779,780,5,1,0,0,780,785,
  	3,114,57,0,781,785,3,44,22,0,782,783,5,1,0,0,783,785,3,44,22,0,784,774,
  	1,0,0,0,784,775,1,0,0,0,784,777,1,0,0,0,784,778,1,0,0,0,784,779,1,0,0,
  	0,784,781,1,0,0,0,784,782,1,0,0,0,785,167,1,0,0,0,786,797,3,40,20,0,787,
  	788,5,1,0,0,788,797,3,40,20,0,789,797,3,52,26,0,790,797,3,114,57,0,791,
  	792,5,1,0,0,792,797,3,114,57,0,793,797,3,44,22,0,794,795,5,1,0,0,795,
  	797,3,44,22,0,796,786,1,0,0,0,796,787,1,0,0,0,796,789,1,0,0,0,796,790,
  	1,0,0,0,796,791,1,0,0,0,796,793,1,0,0,0,796,794,1,0,0,0,797,169,1,0,0,
  	0,798,809,3,40,20,0,799,800,5,1,0,0,800,809,3,40,20,0,801,809,3,52,26,
  	0,802,809,3,114,57,0,803,804,5,1,0,0,804,809,3,114,57,0,805,809,3,44,
  	22,0,806,807,5,1,0,0,807,809,3,44,22,0,808,798,1,0,0,0,808,799,1,0,0,
  	0,808,801,1,0,0,0,808,802,1,0,0,0,808,803,1,0,0,0,808,805,1,0,0,0,808,
  	806,1,0,0,0,809,171,1,0,0,0,810,821,3,40,20,0,811,812,5,1,0,0,812,821,
  	3,40,20,0,813,821,3,52,26,0,814,821,3,114,57,0,815,816,5,1,0,0,816,821,
  	3,114,57,0,817,821,3,44,22,0,818,819,5,1,0,0,819,821,3,44,22,0,820,810,
  	1,0,0,0,820,811,1,0,0,0,820,813,1,0,0,0,820,814,1,0,0,0,820,815,1,0,0,
  	0,820,817,1,0,0,0,820,818,1,0,0,0,821,173,1,0,0,0,822,828,3,166,83,0,
  	823,824,3,166,83,0,824,825,5,12,0,0,825,826,3,174,87,0,826,828,1,0,0,
  	0,827,822,1,0,0,0,827,823,1,0,0,0,828,175,1,0,0,0,829,835,3,168,84,0,
  	830,831,3,168,84,0,831,832,5,12,0,0,832,833,3,176,88,0,833,835,1,0,0,
  	0,834,829,1,0,0,0,834,830,1,0,0,0,835,177,1,0,0,0,836,842,3,170,85,0,
  	837,838,3,170,85,0,838,839,5,12,0,0,839,840,3,178,89,0,840,842,1,0,0,
  	0,841,836,1,0,0,0,841,837,1,0,0,0,842,179,1,0,0,0,843,850,3,172,86,0,
  	844,845,3,172,86,0,845,846,5,12,0,0,846,847,3,180,90,0,847,848,3,180,
  	90,0,848,850,1,0,0,0,849,843,1,0,0,0,849,844,1,0,0,0,850,181,1,0,0,0,
  	851,852,5,54,0,0,852,183,1,0,0,0,853,854,5,68,0,0,854,185,1,0,0,0,855,
  	856,3,182,91,0,856,857,5,24,0,0,857,858,5,55,0,0,858,859,5,32,0,0,859,
  	860,5,28,0,0,860,861,3,174,87,0,861,862,5,29,0,0,862,863,5,12,0,0,863,
  	864,5,56,0,0,864,865,5,32,0,0,865,866,5,28,0,0,866,867,3,178,89,0,867,
  	868,5,29,0,0,868,869,5,25,0,0,869,870,5,10,0,0,870,888,1,0,0,0,871,872,
  	3,182,91,0,872,873,5,24,0,0,873,874,5,56,0,0,874,875,5,32,0,0,875,876,
  	5,28,0,0,876,877,3,178,89,0,877,878,5,29,0,0,878,879,5,12,0,0,879,880,
  	5,55,0,0,880,881,5,32,0,0,881,882,5,28,0,0,882,883,3,174,87,0,883,884,
  	5,29,0,0,884,885,5,25,0,0,885,886,5,10,0,0,886,888,1,0,0,0,887,855,1,
  	0,0,0,887,871,1,0,0,0,888,187,1,0,0,0,889,890,3,184,92,0,890,891,5,24,
  	0,0,891,892,5,55,0,0,892,893,5,32,0,0,893,894,5,28,0,0,894,895,3,176,
  	88,0,895,896,5,29,0,0,896,897,5,12,0,0,897,898,5,56,0,0,898,899,5,32,
  	0,0,899,900,5,28,0,0,900,901,3,180,90,0,901,902,5,29,0,0,902,903,5,25,
  	0,0,903,904,5,10,0,0,904,922,1,0,0,0,905,906,3,184,92,0,906,907,5,24,
  	0,0,907,908,5,56,0,0,908,909,5,32,0,0,909,910,5,28,0,0,910,911,3,180,
  	90,0,911,912,5,29,0,0,912,913,5,12,0,0,913,914,5,55,0,0,914,915,5,32,
  	0,0,915,916,5,28,0,0,916,917,3,176,88,0,917,918,5,29,0,0,918,919,5,25,
  	0,0,919,920,5,10,0,0,920,922,1,0,0,0,921,889,1,0,0,0,921,905,1,0,0,0,
  	922,189,1,0,0,0,923,924,5,47,0,0,924,925,5,24,0,0,925,926,5,50,0,0,926,
  	927,5,32,0,0,927,928,3,192,96,0,928,929,5,25,0,0,929,930,5,10,0,0,930,
  	191,1,0,0,0,931,932,5,8,0,0,932,193,1,0,0,0,933,934,5,48,0,0,934,935,
  	5,24,0,0,935,936,5,25,0,0,936,940,5,10,0,0,937,938,5,48,0,0,938,940,5,
  	10,0,0,939,933,1,0,0,0,939,937,1,0,0,0,940,195,1,0,0,0,941,942,5,45,0,
  	0,942,943,5,24,0,0,943,944,5,25,0,0,944,948,5,10,0,0,945,946,5,45,0,0,
  	946,948,5,10,0,0,947,941,1,0,0,0,947,945,1,0,0,0,948,197,1,0,0,0,949,
  	950,5,46,0,0,950,951,5,24,0,0,951,952,5,25,0,0,952,956,5,10,0,0,953,954,
  	5,46,0,0,954,956,5,10,0,0,955,949,1,0,0,0,955,953,1,0,0,0,956,199,1,0,
  	0,0,957,958,3,202,101,0,958,959,5,24,0,0,959,960,5,73,0,0,960,961,5,32,
  	0,0,961,962,3,208,104,0,962,963,5,12,0,0,963,964,5,74,0,0,964,965,5,32,
  	0,0,965,966,5,28,0,0,966,967,3,212,106,0,967,968,5,29,0,0,968,969,5,25,
  	0,0,969,970,5,10,0,0,970,986,1,0,0,0,971,972,3,202,101,0,972,973,5,24,
  	0,0,973,974,5,74,0,0,974,975,5,32,0,0,975,976,5,28,0,0,976,977,3,212,
  	106,0,977,978,5,29,0,0,978,979,5,12,0,0,979,980,5,73,0,0,980,981,5,32,
  	0,0,981,982,3,208,104,0,982,983,5,25,0,0,983,984,5,10,0,0,984,986,1,0,
  	0,0,985,957,1,0,0,0,985,971,1,0,0,0,986,201,1,0,0,0,987,988,5,44,0,0,
  	988,203,1,0,0,0,989,990,3,206,103,0,990,991,5,24,0,0,991,992,5,73,0,0,
  	992,993,5,32,0,0,993,994,3,208,104,0,994,995,5,12,0,0,995,996,5,74,0,
  	0,996,997,5,32,0,0,997,998,5,28,0,0,998,999,3,212,106,0,999,1000,5,29,
  	0,0,1000,1001,5,25,0,0,1001,1002,5,10,0,0,1002,1018,1,0,0,0,1003,1004,
  	3,206,103,0,1004,1005,5,24,0,0,1005,1006,5,74,0,0,1006,1007,5,32,0,0,
  	1007,1008,5,28,0,0,1008,1009,3,212,106,0,1009,1010,5,29,0,0,1010,1011,
  	5,12,0,0,1011,1012,5,73,0,0,1012,1013,5,32,0,0,1013,1014,3,208,104,0,
  	1014,1015,5,25,0,0,1015,1016,5,10,0,0,1016,1018,1,0,0,0,1017,989,1,0,
  	0,0,1017,1003,1,0,0,0,1018,205,1,0,0,0,1019,1020,5,72,0,0,1020,207,1,
  	0,0,0,1021,1022,5,7,0,0,1022,209,1,0,0,0,1023,1026,3,124,62,0,1024,1026,
  	3,40,20,0,1025,1023,1,0,0,0,1025,1024,1,0,0,0,1026,211,1,0,0,0,1027,1033,
  	3,210,105,0,1028,1029,3,210,105,0,1029,1030,5,14,0,0,1030,1031,3,212,
  	106,0,1031,1033,1,0,0,0,1032,1027,1,0,0,0,1032,1028,1,0,0,0,1033,213,
  	1,0,0,0,65,217,226,250,254,267,278,290,297,319,332,339,348,355,364,370,
  	379,391,420,429,436,448,465,473,478,485,492,497,504,517,533,552,562,582,
  	593,608,615,629,635,646,654,662,678,694,716,756,761,767,772,784,796,808,
  	820,827,834,841,849,887,921,939,947,955,985,1017,1025,1032
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  aspcore2ParserStaticData = staticData.release();
}

}

ASPCore2Parser::ASPCore2Parser(TokenStream *input) : ASPCore2Parser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

ASPCore2Parser::ASPCore2Parser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  ASPCore2Parser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *aspcore2ParserStaticData->atn, aspcore2ParserStaticData->decisionToDFA, aspcore2ParserStaticData->sharedContextCache, options);
}

ASPCore2Parser::~ASPCore2Parser() {
  delete _interpreter;
}

const atn::ATN& ASPCore2Parser::getATN() const {
  return *aspcore2ParserStaticData->atn;
}

std::string ASPCore2Parser::getGrammarFileName() const {
  return "ASPCore2.g4";
}

const std::vector<std::string>& ASPCore2Parser::getRuleNames() const {
  return aspcore2ParserStaticData->ruleNames;
}

const dfa::Vocabulary& ASPCore2Parser::getVocabulary() const {
  return aspcore2ParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView ASPCore2Parser::getSerializedATN() const {
  return aspcore2ParserStaticData->serializedATN;
}


//----------------- ProgramContext ------------------------------------------------------------------

ASPCore2Parser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ASPCore2Parser::Rule_Context *> ASPCore2Parser::ProgramContext::rule_() {
  return getRuleContexts<ASPCore2Parser::Rule_Context>();
}

ASPCore2Parser::Rule_Context* ASPCore2Parser::ProgramContext::rule_(size_t i) {
  return getRuleContext<ASPCore2Parser::Rule_Context>(i);
}


size_t ASPCore2Parser::ProgramContext::getRuleIndex() const {
  return ASPCore2Parser::RuleProgram;
}

void ASPCore2Parser::ProgramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgram(this);
}

void ASPCore2Parser::ProgramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgram(this);
}

ASPCore2Parser::ProgramContext* ASPCore2Parser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 0, ASPCore2Parser::RuleProgram);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(217);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ASPCore2Parser::DIRECTIVE_NAME)
      | (1ULL << ASPCore2Parser::SYMBOLIC_CONSTANT)
      | (1ULL << ASPCore2Parser::VARIABLE)
      | (1ULL << ASPCore2Parser::STRING)
      | (1ULL << ASPCore2Parser::NUMBER)
      | (1ULL << ASPCore2Parser::CONS)
      | (1ULL << ASPCore2Parser::WCONS)
      | (1ULL << ASPCore2Parser::DASH)
      | (1ULL << ASPCore2Parser::PARAM_OPEN)
      | (1ULL << ASPCore2Parser::CURLY_OPEN)
      | (1ULL << ASPCore2Parser::ANON_VAR)
      | (1ULL << ASPCore2Parser::EXISTS)
      | (1ULL << ASPCore2Parser::ANNOTATION_GLOBAL_WASP_PROPAGATOR)
      | (1ULL << ASPCore2Parser::ANNOTATION_RULE_ALIGN_SUBSTITUTIONS)
      | (1ULL << ASPCore2Parser::ANNOTATION_RULE_LOOK_AHEAD)
      | (1ULL << ASPCore2Parser::ANNOTATION_RULE_PROJECTION)
      | (1ULL << ASPCore2Parser::ANNOTATION_RULE_REWRITING_ARITH)
      | (1ULL << ASPCore2Parser::ANNOTATION_RULE_ORDERING)
      | (1ULL << ASPCore2Parser::ANNOTATION_RULE_ATOM_INDEXED)
      | (1ULL << ASPCore2Parser::ANNOTATION_RULE_PARTIAL_ORDER))) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 66)) & ((1ULL << (ASPCore2Parser::ANNOTATION_GLOBAL_ORDERING - 66))
      | (1ULL << (ASPCore2Parser::ANNOTATION_GLOBAL_ATOM_INDEXED - 66))
      | (1ULL << (ASPCore2Parser::ANNOTATION_GLOBAL_PARTIAL_ORDER - 66))
      | (1ULL << (ASPCore2Parser::ANNOTATION_GLOBAL_EXTATOM_CONVERSION - 66))
      | (1ULL << (ASPCore2Parser::ANNOTATION_RULE_TO_DECOMPOSE - 66))
      | (1ULL << (ASPCore2Parser::ANNOTATION_RULE_TO_NOT_DECOMPOSE - 66))
      | (1ULL << (ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC - 66)))) != 0)) {
      setState(214);
      rule_();
      setState(219);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rule_Context ------------------------------------------------------------------

ASPCore2Parser::Rule_Context::Rule_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Simple_ruleContext* ASPCore2Parser::Rule_Context::simple_rule() {
  return getRuleContext<ASPCore2Parser::Simple_ruleContext>(0);
}

ASPCore2Parser::Annotations_ruleContext* ASPCore2Parser::Rule_Context::annotations_rule() {
  return getRuleContext<ASPCore2Parser::Annotations_ruleContext>(0);
}

ASPCore2Parser::Annotation_globalContext* ASPCore2Parser::Rule_Context::annotation_global() {
  return getRuleContext<ASPCore2Parser::Annotation_globalContext>(0);
}

ASPCore2Parser::DirectiveContext* ASPCore2Parser::Rule_Context::directive() {
  return getRuleContext<ASPCore2Parser::DirectiveContext>(0);
}


size_t ASPCore2Parser::Rule_Context::getRuleIndex() const {
  return ASPCore2Parser::RuleRule_;
}

void ASPCore2Parser::Rule_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRule_(this);
}

void ASPCore2Parser::Rule_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRule_(this);
}

ASPCore2Parser::Rule_Context* ASPCore2Parser::rule_() {
  Rule_Context *_localctx = _tracker.createInstance<Rule_Context>(_ctx, getState());
  enterRule(_localctx, 2, ASPCore2Parser::RuleRule_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(226);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ASPCore2Parser::SYMBOLIC_CONSTANT:
      case ASPCore2Parser::VARIABLE:
      case ASPCore2Parser::STRING:
      case ASPCore2Parser::NUMBER:
      case ASPCore2Parser::CONS:
      case ASPCore2Parser::WCONS:
      case ASPCore2Parser::DASH:
      case ASPCore2Parser::PARAM_OPEN:
      case ASPCore2Parser::CURLY_OPEN:
      case ASPCore2Parser::ANON_VAR:
      case ASPCore2Parser::EXISTS: {
        enterOuterAlt(_localctx, 1);
        setState(220);
        simple_rule();
        break;
      }

      case ASPCore2Parser::ANNOTATION_RULE_ALIGN_SUBSTITUTIONS:
      case ASPCore2Parser::ANNOTATION_RULE_LOOK_AHEAD:
      case ASPCore2Parser::ANNOTATION_RULE_PROJECTION:
      case ASPCore2Parser::ANNOTATION_RULE_REWRITING_ARITH:
      case ASPCore2Parser::ANNOTATION_RULE_ORDERING:
      case ASPCore2Parser::ANNOTATION_RULE_ATOM_INDEXED:
      case ASPCore2Parser::ANNOTATION_RULE_PARTIAL_ORDER:
      case ASPCore2Parser::ANNOTATION_RULE_TO_DECOMPOSE:
      case ASPCore2Parser::ANNOTATION_RULE_TO_NOT_DECOMPOSE: {
        enterOuterAlt(_localctx, 2);
        setState(221);
        annotations_rule();
        setState(222);
        simple_rule();
        break;
      }

      case ASPCore2Parser::ANNOTATION_GLOBAL_WASP_PROPAGATOR:
      case ASPCore2Parser::ANNOTATION_GLOBAL_ORDERING:
      case ASPCore2Parser::ANNOTATION_GLOBAL_ATOM_INDEXED:
      case ASPCore2Parser::ANNOTATION_GLOBAL_PARTIAL_ORDER:
      case ASPCore2Parser::ANNOTATION_GLOBAL_EXTATOM_CONVERSION:
      case ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC: {
        enterOuterAlt(_localctx, 3);
        setState(224);
        annotation_global();
        break;
      }

      case ASPCore2Parser::DIRECTIVE_NAME: {
        enterOuterAlt(_localctx, 4);
        setState(225);
        directive();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Simple_ruleContext ------------------------------------------------------------------

ASPCore2Parser::Simple_ruleContext::Simple_ruleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::HeadContext* ASPCore2Parser::Simple_ruleContext::head() {
  return getRuleContext<ASPCore2Parser::HeadContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Simple_ruleContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}

tree::TerminalNode* ASPCore2Parser::Simple_ruleContext::CONS() {
  return getToken(ASPCore2Parser::CONS, 0);
}

ASPCore2Parser::BodyContext* ASPCore2Parser::Simple_ruleContext::body() {
  return getRuleContext<ASPCore2Parser::BodyContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Simple_ruleContext::WCONS() {
  return getToken(ASPCore2Parser::WCONS, 0);
}

ASPCore2Parser::Weight_at_levelsContext* ASPCore2Parser::Simple_ruleContext::weight_at_levels() {
  return getRuleContext<ASPCore2Parser::Weight_at_levelsContext>(0);
}

ASPCore2Parser::QueryContext* ASPCore2Parser::Simple_ruleContext::query() {
  return getRuleContext<ASPCore2Parser::QueryContext>(0);
}


size_t ASPCore2Parser::Simple_ruleContext::getRuleIndex() const {
  return ASPCore2Parser::RuleSimple_rule;
}

void ASPCore2Parser::Simple_ruleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple_rule(this);
}

void ASPCore2Parser::Simple_ruleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple_rule(this);
}

ASPCore2Parser::Simple_ruleContext* ASPCore2Parser::simple_rule() {
  Simple_ruleContext *_localctx = _tracker.createInstance<Simple_ruleContext>(_ctx, getState());
  enterRule(_localctx, 4, ASPCore2Parser::RuleSimple_rule);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(250);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(228);
      head();
      setState(229);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(231);
      head();
      setState(232);
      match(ASPCore2Parser::CONS);
      setState(233);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(235);
      head();
      setState(236);
      match(ASPCore2Parser::CONS);
      setState(237);
      body();
      setState(238);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(240);
      match(ASPCore2Parser::CONS);
      setState(241);
      body();
      setState(242);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(244);
      match(ASPCore2Parser::WCONS);
      setState(245);
      body();
      setState(246);
      match(ASPCore2Parser::DOT);
      setState(247);
      weight_at_levels();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(249);
      query();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HeadContext ------------------------------------------------------------------

ASPCore2Parser::HeadContext::HeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::DisjunctionContext* ASPCore2Parser::HeadContext::disjunction() {
  return getRuleContext<ASPCore2Parser::DisjunctionContext>(0);
}

ASPCore2Parser::Choice_atomContext* ASPCore2Parser::HeadContext::choice_atom() {
  return getRuleContext<ASPCore2Parser::Choice_atomContext>(0);
}


size_t ASPCore2Parser::HeadContext::getRuleIndex() const {
  return ASPCore2Parser::RuleHead;
}

void ASPCore2Parser::HeadContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHead(this);
}

void ASPCore2Parser::HeadContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHead(this);
}

ASPCore2Parser::HeadContext* ASPCore2Parser::head() {
  HeadContext *_localctx = _tracker.createInstance<HeadContext>(_ctx, getState());
  enterRule(_localctx, 6, ASPCore2Parser::RuleHead);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(254);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(252);
      disjunction();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(253);
      choice_atom();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BodyContext ------------------------------------------------------------------

ASPCore2Parser::BodyContext::BodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::ConjunctionContext* ASPCore2Parser::BodyContext::conjunction() {
  return getRuleContext<ASPCore2Parser::ConjunctionContext>(0);
}


size_t ASPCore2Parser::BodyContext::getRuleIndex() const {
  return ASPCore2Parser::RuleBody;
}

void ASPCore2Parser::BodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody(this);
}

void ASPCore2Parser::BodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody(this);
}

ASPCore2Parser::BodyContext* ASPCore2Parser::body() {
  BodyContext *_localctx = _tracker.createInstance<BodyContext>(_ctx, getState());
  enterRule(_localctx, 8, ASPCore2Parser::RuleBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(256);
    conjunction();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Weight_at_levelsContext ------------------------------------------------------------------

ASPCore2Parser::Weight_at_levelsContext::Weight_at_levelsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Weight_at_levelsContext::SQUARE_OPEN() {
  return getToken(ASPCore2Parser::SQUARE_OPEN, 0);
}

ASPCore2Parser::TermContext* ASPCore2Parser::Weight_at_levelsContext::term() {
  return getRuleContext<ASPCore2Parser::TermContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Weight_at_levelsContext::SQUARE_CLOSED() {
  return getToken(ASPCore2Parser::SQUARE_CLOSED, 0);
}

ASPCore2Parser::Levels_and_termsContext* ASPCore2Parser::Weight_at_levelsContext::levels_and_terms() {
  return getRuleContext<ASPCore2Parser::Levels_and_termsContext>(0);
}


size_t ASPCore2Parser::Weight_at_levelsContext::getRuleIndex() const {
  return ASPCore2Parser::RuleWeight_at_levels;
}

void ASPCore2Parser::Weight_at_levelsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWeight_at_levels(this);
}

void ASPCore2Parser::Weight_at_levelsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWeight_at_levels(this);
}

ASPCore2Parser::Weight_at_levelsContext* ASPCore2Parser::weight_at_levels() {
  Weight_at_levelsContext *_localctx = _tracker.createInstance<Weight_at_levelsContext>(_ctx, getState());
  enterRule(_localctx, 10, ASPCore2Parser::RuleWeight_at_levels);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(267);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(258);
      match(ASPCore2Parser::SQUARE_OPEN);
      setState(259);
      term();
      setState(260);
      match(ASPCore2Parser::SQUARE_CLOSED);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(262);
      match(ASPCore2Parser::SQUARE_OPEN);
      setState(263);
      term();
      setState(264);
      levels_and_terms();
      setState(265);
      match(ASPCore2Parser::SQUARE_CLOSED);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Levels_and_termsContext ------------------------------------------------------------------

ASPCore2Parser::Levels_and_termsContext::Levels_and_termsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Levels_and_termsContext::AT() {
  return getToken(ASPCore2Parser::AT, 0);
}

ASPCore2Parser::TermContext* ASPCore2Parser::Levels_and_termsContext::term() {
  return getRuleContext<ASPCore2Parser::TermContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Levels_and_termsContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

ASPCore2Parser::TermsContext* ASPCore2Parser::Levels_and_termsContext::terms() {
  return getRuleContext<ASPCore2Parser::TermsContext>(0);
}


size_t ASPCore2Parser::Levels_and_termsContext::getRuleIndex() const {
  return ASPCore2Parser::RuleLevels_and_terms;
}

void ASPCore2Parser::Levels_and_termsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLevels_and_terms(this);
}

void ASPCore2Parser::Levels_and_termsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLevels_and_terms(this);
}

ASPCore2Parser::Levels_and_termsContext* ASPCore2Parser::levels_and_terms() {
  Levels_and_termsContext *_localctx = _tracker.createInstance<Levels_and_termsContext>(_ctx, getState());
  enterRule(_localctx, 12, ASPCore2Parser::RuleLevels_and_terms);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(278);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(269);
      match(ASPCore2Parser::AT);
      setState(270);
      term();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(271);
      match(ASPCore2Parser::AT);
      setState(272);
      term();
      setState(273);
      match(ASPCore2Parser::COMMA);
      setState(274);
      terms();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(276);
      match(ASPCore2Parser::COMMA);
      setState(277);
      terms();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DisjunctionContext ------------------------------------------------------------------

ASPCore2Parser::DisjunctionContext::DisjunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Classic_literalContext* ASPCore2Parser::DisjunctionContext::classic_literal() {
  return getRuleContext<ASPCore2Parser::Classic_literalContext>(0);
}

tree::TerminalNode* ASPCore2Parser::DisjunctionContext::HEAD_SEPARATOR() {
  return getToken(ASPCore2Parser::HEAD_SEPARATOR, 0);
}

ASPCore2Parser::DisjunctionContext* ASPCore2Parser::DisjunctionContext::disjunction() {
  return getRuleContext<ASPCore2Parser::DisjunctionContext>(0);
}

ASPCore2Parser::Existential_atomContext* ASPCore2Parser::DisjunctionContext::existential_atom() {
  return getRuleContext<ASPCore2Parser::Existential_atomContext>(0);
}


size_t ASPCore2Parser::DisjunctionContext::getRuleIndex() const {
  return ASPCore2Parser::RuleDisjunction;
}

void ASPCore2Parser::DisjunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDisjunction(this);
}

void ASPCore2Parser::DisjunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDisjunction(this);
}

ASPCore2Parser::DisjunctionContext* ASPCore2Parser::disjunction() {
  DisjunctionContext *_localctx = _tracker.createInstance<DisjunctionContext>(_ctx, getState());
  enterRule(_localctx, 14, ASPCore2Parser::RuleDisjunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(290);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(280);
      classic_literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(281);
      classic_literal();
      setState(282);
      match(ASPCore2Parser::HEAD_SEPARATOR);
      setState(283);
      disjunction();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(285);
      existential_atom();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(286);
      existential_atom();
      setState(287);
      match(ASPCore2Parser::HEAD_SEPARATOR);
      setState(288);
      disjunction();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConjunctionContext ------------------------------------------------------------------

ASPCore2Parser::ConjunctionContext::ConjunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Naf_literal_aggregateContext* ASPCore2Parser::ConjunctionContext::naf_literal_aggregate() {
  return getRuleContext<ASPCore2Parser::Naf_literal_aggregateContext>(0);
}

tree::TerminalNode* ASPCore2Parser::ConjunctionContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

ASPCore2Parser::ConjunctionContext* ASPCore2Parser::ConjunctionContext::conjunction() {
  return getRuleContext<ASPCore2Parser::ConjunctionContext>(0);
}


size_t ASPCore2Parser::ConjunctionContext::getRuleIndex() const {
  return ASPCore2Parser::RuleConjunction;
}

void ASPCore2Parser::ConjunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConjunction(this);
}

void ASPCore2Parser::ConjunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConjunction(this);
}

ASPCore2Parser::ConjunctionContext* ASPCore2Parser::conjunction() {
  ConjunctionContext *_localctx = _tracker.createInstance<ConjunctionContext>(_ctx, getState());
  enterRule(_localctx, 16, ASPCore2Parser::RuleConjunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(297);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(292);
      naf_literal_aggregate();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(293);
      naf_literal_aggregate();
      setState(294);
      match(ASPCore2Parser::COMMA);
      setState(295);
      conjunction();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Choice_atomContext ------------------------------------------------------------------

ASPCore2Parser::Choice_atomContext::Choice_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Lower_guardContext* ASPCore2Parser::Choice_atomContext::lower_guard() {
  return getRuleContext<ASPCore2Parser::Lower_guardContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Choice_atomContext::CURLY_OPEN() {
  return getToken(ASPCore2Parser::CURLY_OPEN, 0);
}

ASPCore2Parser::Choice_elementsContext* ASPCore2Parser::Choice_atomContext::choice_elements() {
  return getRuleContext<ASPCore2Parser::Choice_elementsContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Choice_atomContext::CURLY_CLOSE() {
  return getToken(ASPCore2Parser::CURLY_CLOSE, 0);
}

ASPCore2Parser::Upper_guardContext* ASPCore2Parser::Choice_atomContext::upper_guard() {
  return getRuleContext<ASPCore2Parser::Upper_guardContext>(0);
}


size_t ASPCore2Parser::Choice_atomContext::getRuleIndex() const {
  return ASPCore2Parser::RuleChoice_atom;
}

void ASPCore2Parser::Choice_atomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChoice_atom(this);
}

void ASPCore2Parser::Choice_atomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChoice_atom(this);
}

ASPCore2Parser::Choice_atomContext* ASPCore2Parser::choice_atom() {
  Choice_atomContext *_localctx = _tracker.createInstance<Choice_atomContext>(_ctx, getState());
  enterRule(_localctx, 18, ASPCore2Parser::RuleChoice_atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(319);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(299);
      lower_guard();
      setState(300);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(301);
      choice_elements();
      setState(302);
      match(ASPCore2Parser::CURLY_CLOSE);
      setState(303);
      upper_guard();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(305);
      lower_guard();
      setState(306);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(307);
      choice_elements();
      setState(308);
      match(ASPCore2Parser::CURLY_CLOSE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(310);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(311);
      choice_elements();
      setState(312);
      match(ASPCore2Parser::CURLY_CLOSE);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(314);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(315);
      choice_elements();
      setState(316);
      match(ASPCore2Parser::CURLY_CLOSE);
      setState(317);
      upper_guard();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lower_guardContext ------------------------------------------------------------------

ASPCore2Parser::Lower_guardContext::Lower_guardContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::TermContext* ASPCore2Parser::Lower_guardContext::term() {
  return getRuleContext<ASPCore2Parser::TermContext>(0);
}

ASPCore2Parser::BinopContext* ASPCore2Parser::Lower_guardContext::binop() {
  return getRuleContext<ASPCore2Parser::BinopContext>(0);
}


size_t ASPCore2Parser::Lower_guardContext::getRuleIndex() const {
  return ASPCore2Parser::RuleLower_guard;
}

void ASPCore2Parser::Lower_guardContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLower_guard(this);
}

void ASPCore2Parser::Lower_guardContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLower_guard(this);
}

ASPCore2Parser::Lower_guardContext* ASPCore2Parser::lower_guard() {
  Lower_guardContext *_localctx = _tracker.createInstance<Lower_guardContext>(_ctx, getState());
  enterRule(_localctx, 20, ASPCore2Parser::RuleLower_guard);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(321);
    term();
    setState(322);
    binop();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Upper_guardContext ------------------------------------------------------------------

ASPCore2Parser::Upper_guardContext::Upper_guardContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::BinopContext* ASPCore2Parser::Upper_guardContext::binop() {
  return getRuleContext<ASPCore2Parser::BinopContext>(0);
}

ASPCore2Parser::TermContext* ASPCore2Parser::Upper_guardContext::term() {
  return getRuleContext<ASPCore2Parser::TermContext>(0);
}


size_t ASPCore2Parser::Upper_guardContext::getRuleIndex() const {
  return ASPCore2Parser::RuleUpper_guard;
}

void ASPCore2Parser::Upper_guardContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUpper_guard(this);
}

void ASPCore2Parser::Upper_guardContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUpper_guard(this);
}

ASPCore2Parser::Upper_guardContext* ASPCore2Parser::upper_guard() {
  Upper_guardContext *_localctx = _tracker.createInstance<Upper_guardContext>(_ctx, getState());
  enterRule(_localctx, 22, ASPCore2Parser::RuleUpper_guard);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(324);
    binop();
    setState(325);
    term();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Choice_elementsContext ------------------------------------------------------------------

ASPCore2Parser::Choice_elementsContext::Choice_elementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Choice_elementContext* ASPCore2Parser::Choice_elementsContext::choice_element() {
  return getRuleContext<ASPCore2Parser::Choice_elementContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Choice_elementsContext::SEMICOLON() {
  return getToken(ASPCore2Parser::SEMICOLON, 0);
}

ASPCore2Parser::Choice_elementsContext* ASPCore2Parser::Choice_elementsContext::choice_elements() {
  return getRuleContext<ASPCore2Parser::Choice_elementsContext>(0);
}


size_t ASPCore2Parser::Choice_elementsContext::getRuleIndex() const {
  return ASPCore2Parser::RuleChoice_elements;
}

void ASPCore2Parser::Choice_elementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChoice_elements(this);
}

void ASPCore2Parser::Choice_elementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChoice_elements(this);
}

ASPCore2Parser::Choice_elementsContext* ASPCore2Parser::choice_elements() {
  Choice_elementsContext *_localctx = _tracker.createInstance<Choice_elementsContext>(_ctx, getState());
  enterRule(_localctx, 24, ASPCore2Parser::RuleChoice_elements);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(332);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(327);
      choice_element();
      setState(328);
      match(ASPCore2Parser::SEMICOLON);
      setState(329);
      choice_elements();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(331);
      choice_element();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Choice_elementContext ------------------------------------------------------------------

ASPCore2Parser::Choice_elementContext::Choice_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Choice_element_atomContext* ASPCore2Parser::Choice_elementContext::choice_element_atom() {
  return getRuleContext<ASPCore2Parser::Choice_element_atomContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Choice_elementContext::COLON() {
  return getToken(ASPCore2Parser::COLON, 0);
}

ASPCore2Parser::Choice_elements_literalsContext* ASPCore2Parser::Choice_elementContext::choice_elements_literals() {
  return getRuleContext<ASPCore2Parser::Choice_elements_literalsContext>(0);
}


size_t ASPCore2Parser::Choice_elementContext::getRuleIndex() const {
  return ASPCore2Parser::RuleChoice_element;
}

void ASPCore2Parser::Choice_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChoice_element(this);
}

void ASPCore2Parser::Choice_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChoice_element(this);
}

ASPCore2Parser::Choice_elementContext* ASPCore2Parser::choice_element() {
  Choice_elementContext *_localctx = _tracker.createInstance<Choice_elementContext>(_ctx, getState());
  enterRule(_localctx, 26, ASPCore2Parser::RuleChoice_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(339);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(334);
      choice_element_atom();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(335);
      choice_element_atom();
      setState(336);
      match(ASPCore2Parser::COLON);
      setState(337);
      choice_elements_literals();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Choice_element_atomContext ------------------------------------------------------------------

ASPCore2Parser::Choice_element_atomContext::Choice_element_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::AtomContext* ASPCore2Parser::Choice_element_atomContext::atom() {
  return getRuleContext<ASPCore2Parser::AtomContext>(0);
}


size_t ASPCore2Parser::Choice_element_atomContext::getRuleIndex() const {
  return ASPCore2Parser::RuleChoice_element_atom;
}

void ASPCore2Parser::Choice_element_atomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChoice_element_atom(this);
}

void ASPCore2Parser::Choice_element_atomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChoice_element_atom(this);
}

ASPCore2Parser::Choice_element_atomContext* ASPCore2Parser::choice_element_atom() {
  Choice_element_atomContext *_localctx = _tracker.createInstance<Choice_element_atomContext>(_ctx, getState());
  enterRule(_localctx, 28, ASPCore2Parser::RuleChoice_element_atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(341);
    atom();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Choice_elements_literalsContext ------------------------------------------------------------------

ASPCore2Parser::Choice_elements_literalsContext::Choice_elements_literalsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Naf_literalContext* ASPCore2Parser::Choice_elements_literalsContext::naf_literal() {
  return getRuleContext<ASPCore2Parser::Naf_literalContext>(0);
}

ASPCore2Parser::Naf_literalsContext* ASPCore2Parser::Choice_elements_literalsContext::naf_literals() {
  return getRuleContext<ASPCore2Parser::Naf_literalsContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Choice_elements_literalsContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}


size_t ASPCore2Parser::Choice_elements_literalsContext::getRuleIndex() const {
  return ASPCore2Parser::RuleChoice_elements_literals;
}

void ASPCore2Parser::Choice_elements_literalsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChoice_elements_literals(this);
}

void ASPCore2Parser::Choice_elements_literalsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChoice_elements_literals(this);
}

ASPCore2Parser::Choice_elements_literalsContext* ASPCore2Parser::choice_elements_literals() {
  Choice_elements_literalsContext *_localctx = _tracker.createInstance<Choice_elements_literalsContext>(_ctx, getState());
  enterRule(_localctx, 30, ASPCore2Parser::RuleChoice_elements_literals);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(348);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(343);
      naf_literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(344);
      naf_literals();
      setState(345);
      match(ASPCore2Parser::COMMA);
      setState(346);
      naf_literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Naf_literalsContext ------------------------------------------------------------------

ASPCore2Parser::Naf_literalsContext::Naf_literalsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Naf_literalContext* ASPCore2Parser::Naf_literalsContext::naf_literal() {
  return getRuleContext<ASPCore2Parser::Naf_literalContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Naf_literalsContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

ASPCore2Parser::Naf_literalsContext* ASPCore2Parser::Naf_literalsContext::naf_literals() {
  return getRuleContext<ASPCore2Parser::Naf_literalsContext>(0);
}


size_t ASPCore2Parser::Naf_literalsContext::getRuleIndex() const {
  return ASPCore2Parser::RuleNaf_literals;
}

void ASPCore2Parser::Naf_literalsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNaf_literals(this);
}

void ASPCore2Parser::Naf_literalsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNaf_literals(this);
}

ASPCore2Parser::Naf_literalsContext* ASPCore2Parser::naf_literals() {
  Naf_literalsContext *_localctx = _tracker.createInstance<Naf_literalsContext>(_ctx, getState());
  enterRule(_localctx, 32, ASPCore2Parser::RuleNaf_literals);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(355);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(350);
      naf_literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(351);
      naf_literal();
      setState(352);
      match(ASPCore2Parser::COMMA);
      setState(353);
      naf_literals();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Naf_literalContext ------------------------------------------------------------------

ASPCore2Parser::Naf_literalContext::Naf_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Classic_literalContext* ASPCore2Parser::Naf_literalContext::classic_literal() {
  return getRuleContext<ASPCore2Parser::Classic_literalContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Naf_literalContext::NAF() {
  return getToken(ASPCore2Parser::NAF, 0);
}

ASPCore2Parser::Builtin_atomContext* ASPCore2Parser::Naf_literalContext::builtin_atom() {
  return getRuleContext<ASPCore2Parser::Builtin_atomContext>(0);
}

ASPCore2Parser::ExtAtomContext* ASPCore2Parser::Naf_literalContext::extAtom() {
  return getRuleContext<ASPCore2Parser::ExtAtomContext>(0);
}


size_t ASPCore2Parser::Naf_literalContext::getRuleIndex() const {
  return ASPCore2Parser::RuleNaf_literal;
}

void ASPCore2Parser::Naf_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNaf_literal(this);
}

void ASPCore2Parser::Naf_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNaf_literal(this);
}

ASPCore2Parser::Naf_literalContext* ASPCore2Parser::naf_literal() {
  Naf_literalContext *_localctx = _tracker.createInstance<Naf_literalContext>(_ctx, getState());
  enterRule(_localctx, 34, ASPCore2Parser::RuleNaf_literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(364);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(357);
      classic_literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(358);
      match(ASPCore2Parser::NAF);
      setState(359);
      classic_literal();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(360);
      builtin_atom();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(361);
      extAtom();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(362);
      match(ASPCore2Parser::NAF);
      setState(363);
      extAtom();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Naf_literal_aggregateContext ------------------------------------------------------------------

ASPCore2Parser::Naf_literal_aggregateContext::Naf_literal_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Naf_literalContext* ASPCore2Parser::Naf_literal_aggregateContext::naf_literal() {
  return getRuleContext<ASPCore2Parser::Naf_literalContext>(0);
}

ASPCore2Parser::Aggregate_atomContext* ASPCore2Parser::Naf_literal_aggregateContext::aggregate_atom() {
  return getRuleContext<ASPCore2Parser::Aggregate_atomContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Naf_literal_aggregateContext::NAF() {
  return getToken(ASPCore2Parser::NAF, 0);
}


size_t ASPCore2Parser::Naf_literal_aggregateContext::getRuleIndex() const {
  return ASPCore2Parser::RuleNaf_literal_aggregate;
}

void ASPCore2Parser::Naf_literal_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNaf_literal_aggregate(this);
}

void ASPCore2Parser::Naf_literal_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNaf_literal_aggregate(this);
}

ASPCore2Parser::Naf_literal_aggregateContext* ASPCore2Parser::naf_literal_aggregate() {
  Naf_literal_aggregateContext *_localctx = _tracker.createInstance<Naf_literal_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 36, ASPCore2Parser::RuleNaf_literal_aggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(370);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(366);
      naf_literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(367);
      aggregate_atom();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(368);
      match(ASPCore2Parser::NAF);
      setState(369);
      aggregate_atom();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Existential_atomContext ------------------------------------------------------------------

ASPCore2Parser::Existential_atomContext::Existential_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Existential_atomContext::EXISTS() {
  return getToken(ASPCore2Parser::EXISTS, 0);
}

ASPCore2Parser::VarsContext* ASPCore2Parser::Existential_atomContext::vars() {
  return getRuleContext<ASPCore2Parser::VarsContext>(0);
}

ASPCore2Parser::AtomContext* ASPCore2Parser::Existential_atomContext::atom() {
  return getRuleContext<ASPCore2Parser::AtomContext>(0);
}


size_t ASPCore2Parser::Existential_atomContext::getRuleIndex() const {
  return ASPCore2Parser::RuleExistential_atom;
}

void ASPCore2Parser::Existential_atomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExistential_atom(this);
}

void ASPCore2Parser::Existential_atomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExistential_atom(this);
}

ASPCore2Parser::Existential_atomContext* ASPCore2Parser::existential_atom() {
  Existential_atomContext *_localctx = _tracker.createInstance<Existential_atomContext>(_ctx, getState());
  enterRule(_localctx, 38, ASPCore2Parser::RuleExistential_atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(372);
    match(ASPCore2Parser::EXISTS);
    setState(373);
    vars();
    setState(374);
    atom();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Classic_literalContext ------------------------------------------------------------------

ASPCore2Parser::Classic_literalContext::Classic_literalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::AtomContext* ASPCore2Parser::Classic_literalContext::atom() {
  return getRuleContext<ASPCore2Parser::AtomContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Classic_literalContext::DASH() {
  return getToken(ASPCore2Parser::DASH, 0);
}


size_t ASPCore2Parser::Classic_literalContext::getRuleIndex() const {
  return ASPCore2Parser::RuleClassic_literal;
}

void ASPCore2Parser::Classic_literalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassic_literal(this);
}

void ASPCore2Parser::Classic_literalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassic_literal(this);
}

ASPCore2Parser::Classic_literalContext* ASPCore2Parser::classic_literal() {
  Classic_literalContext *_localctx = _tracker.createInstance<Classic_literalContext>(_ctx, getState());
  enterRule(_localctx, 40, ASPCore2Parser::RuleClassic_literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(379);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ASPCore2Parser::SYMBOLIC_CONSTANT:
      case ASPCore2Parser::VARIABLE:
      case ASPCore2Parser::STRING: {
        enterOuterAlt(_localctx, 1);
        setState(376);
        atom();
        break;
      }

      case ASPCore2Parser::DASH: {
        enterOuterAlt(_localctx, 2);
        setState(377);
        match(ASPCore2Parser::DASH);
        setState(378);
        atom();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AtomContext ------------------------------------------------------------------

ASPCore2Parser::AtomContext::AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::IdentifierContext* ASPCore2Parser::AtomContext::identifier() {
  return getRuleContext<ASPCore2Parser::IdentifierContext>(0);
}

tree::TerminalNode* ASPCore2Parser::AtomContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

ASPCore2Parser::TermsContext* ASPCore2Parser::AtomContext::terms() {
  return getRuleContext<ASPCore2Parser::TermsContext>(0);
}

tree::TerminalNode* ASPCore2Parser::AtomContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}


size_t ASPCore2Parser::AtomContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAtom;
}

void ASPCore2Parser::AtomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAtom(this);
}

void ASPCore2Parser::AtomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAtom(this);
}

ASPCore2Parser::AtomContext* ASPCore2Parser::atom() {
  AtomContext *_localctx = _tracker.createInstance<AtomContext>(_ctx, getState());
  enterRule(_localctx, 42, ASPCore2Parser::RuleAtom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(391);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(381);
      identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(382);
      identifier();
      setState(383);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(384);
      terms();
      setState(385);
      match(ASPCore2Parser::PARAM_CLOSE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(387);
      identifier();
      setState(388);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(389);
      match(ASPCore2Parser::PARAM_CLOSE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExtAtomContext ------------------------------------------------------------------

ASPCore2Parser::ExtAtomContext::ExtAtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::ExtAtomContext::AMPERSAND() {
  return getToken(ASPCore2Parser::AMPERSAND, 0);
}

ASPCore2Parser::IdentifierContext* ASPCore2Parser::ExtAtomContext::identifier() {
  return getRuleContext<ASPCore2Parser::IdentifierContext>(0);
}

tree::TerminalNode* ASPCore2Parser::ExtAtomContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

std::vector<ASPCore2Parser::TermsContext *> ASPCore2Parser::ExtAtomContext::terms() {
  return getRuleContexts<ASPCore2Parser::TermsContext>();
}

ASPCore2Parser::TermsContext* ASPCore2Parser::ExtAtomContext::terms(size_t i) {
  return getRuleContext<ASPCore2Parser::TermsContext>(i);
}

ASPCore2Parser::ExtSemicolContext* ASPCore2Parser::ExtAtomContext::extSemicol() {
  return getRuleContext<ASPCore2Parser::ExtSemicolContext>(0);
}

tree::TerminalNode* ASPCore2Parser::ExtAtomContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}


size_t ASPCore2Parser::ExtAtomContext::getRuleIndex() const {
  return ASPCore2Parser::RuleExtAtom;
}

void ASPCore2Parser::ExtAtomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtAtom(this);
}

void ASPCore2Parser::ExtAtomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtAtom(this);
}

ASPCore2Parser::ExtAtomContext* ASPCore2Parser::extAtom() {
  ExtAtomContext *_localctx = _tracker.createInstance<ExtAtomContext>(_ctx, getState());
  enterRule(_localctx, 44, ASPCore2Parser::RuleExtAtom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(420);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(393);
      match(ASPCore2Parser::AMPERSAND);
      setState(394);
      identifier();
      setState(395);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(396);
      terms();
      setState(397);
      extSemicol();
      setState(398);
      terms();
      setState(399);
      match(ASPCore2Parser::PARAM_CLOSE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(401);
      match(ASPCore2Parser::AMPERSAND);
      setState(402);
      identifier();
      setState(403);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(404);
      extSemicol();
      setState(405);
      terms();
      setState(406);
      match(ASPCore2Parser::PARAM_CLOSE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(408);
      match(ASPCore2Parser::AMPERSAND);
      setState(409);
      identifier();
      setState(410);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(411);
      terms();
      setState(412);
      extSemicol();
      setState(413);
      match(ASPCore2Parser::PARAM_CLOSE);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(415);
      match(ASPCore2Parser::AMPERSAND);
      setState(416);
      identifier();
      setState(417);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(418);
      match(ASPCore2Parser::PARAM_CLOSE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExtSemicolContext ------------------------------------------------------------------

ASPCore2Parser::ExtSemicolContext::ExtSemicolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::ExtSemicolContext::SEMICOLON() {
  return getToken(ASPCore2Parser::SEMICOLON, 0);
}


size_t ASPCore2Parser::ExtSemicolContext::getRuleIndex() const {
  return ASPCore2Parser::RuleExtSemicol;
}

void ASPCore2Parser::ExtSemicolContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtSemicol(this);
}

void ASPCore2Parser::ExtSemicolContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtSemicol(this);
}

ASPCore2Parser::ExtSemicolContext* ASPCore2Parser::extSemicol() {
  ExtSemicolContext *_localctx = _tracker.createInstance<ExtSemicolContext>(_ctx, getState());
  enterRule(_localctx, 46, ASPCore2Parser::RuleExtSemicol);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(422);
    match(ASPCore2Parser::SEMICOLON);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TermsContext ------------------------------------------------------------------

ASPCore2Parser::TermsContext::TermsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::TermContext* ASPCore2Parser::TermsContext::term() {
  return getRuleContext<ASPCore2Parser::TermContext>(0);
}

tree::TerminalNode* ASPCore2Parser::TermsContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

ASPCore2Parser::TermsContext* ASPCore2Parser::TermsContext::terms() {
  return getRuleContext<ASPCore2Parser::TermsContext>(0);
}


size_t ASPCore2Parser::TermsContext::getRuleIndex() const {
  return ASPCore2Parser::RuleTerms;
}

void ASPCore2Parser::TermsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTerms(this);
}

void ASPCore2Parser::TermsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTerms(this);
}

ASPCore2Parser::TermsContext* ASPCore2Parser::terms() {
  TermsContext *_localctx = _tracker.createInstance<TermsContext>(_ctx, getState());
  enterRule(_localctx, 48, ASPCore2Parser::RuleTerms);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(429);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(424);
      term();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(425);
      term();
      setState(426);
      match(ASPCore2Parser::COMMA);
      setState(427);
      terms();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Basic_termsContext ------------------------------------------------------------------

ASPCore2Parser::Basic_termsContext::Basic_termsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Basic_termContext* ASPCore2Parser::Basic_termsContext::basic_term() {
  return getRuleContext<ASPCore2Parser::Basic_termContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Basic_termsContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

ASPCore2Parser::Basic_termsContext* ASPCore2Parser::Basic_termsContext::basic_terms() {
  return getRuleContext<ASPCore2Parser::Basic_termsContext>(0);
}


size_t ASPCore2Parser::Basic_termsContext::getRuleIndex() const {
  return ASPCore2Parser::RuleBasic_terms;
}

void ASPCore2Parser::Basic_termsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBasic_terms(this);
}

void ASPCore2Parser::Basic_termsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBasic_terms(this);
}

ASPCore2Parser::Basic_termsContext* ASPCore2Parser::basic_terms() {
  Basic_termsContext *_localctx = _tracker.createInstance<Basic_termsContext>(_ctx, getState());
  enterRule(_localctx, 50, ASPCore2Parser::RuleBasic_terms);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(436);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(431);
      basic_term();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(432);
      basic_term();
      setState(433);
      match(ASPCore2Parser::COMMA);
      setState(434);
      basic_terms();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Builtin_atomContext ------------------------------------------------------------------

ASPCore2Parser::Builtin_atomContext::Builtin_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ASPCore2Parser::TermContext *> ASPCore2Parser::Builtin_atomContext::term() {
  return getRuleContexts<ASPCore2Parser::TermContext>();
}

ASPCore2Parser::TermContext* ASPCore2Parser::Builtin_atomContext::term(size_t i) {
  return getRuleContext<ASPCore2Parser::TermContext>(i);
}

ASPCore2Parser::BinopContext* ASPCore2Parser::Builtin_atomContext::binop() {
  return getRuleContext<ASPCore2Parser::BinopContext>(0);
}


size_t ASPCore2Parser::Builtin_atomContext::getRuleIndex() const {
  return ASPCore2Parser::RuleBuiltin_atom;
}

void ASPCore2Parser::Builtin_atomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBuiltin_atom(this);
}

void ASPCore2Parser::Builtin_atomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBuiltin_atom(this);
}

ASPCore2Parser::Builtin_atomContext* ASPCore2Parser::builtin_atom() {
  Builtin_atomContext *_localctx = _tracker.createInstance<Builtin_atomContext>(_ctx, getState());
  enterRule(_localctx, 52, ASPCore2Parser::RuleBuiltin_atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(438);
    term();
    setState(439);
    binop();
    setState(440);
    term();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompareopContext ------------------------------------------------------------------

ASPCore2Parser::CompareopContext::CompareopContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::CompareopContext::EQUAL() {
  return getToken(ASPCore2Parser::EQUAL, 0);
}

tree::TerminalNode* ASPCore2Parser::CompareopContext::UNEQUAL() {
  return getToken(ASPCore2Parser::UNEQUAL, 0);
}


size_t ASPCore2Parser::CompareopContext::getRuleIndex() const {
  return ASPCore2Parser::RuleCompareop;
}

void ASPCore2Parser::CompareopContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCompareop(this);
}

void ASPCore2Parser::CompareopContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCompareop(this);
}

ASPCore2Parser::CompareopContext* ASPCore2Parser::compareop() {
  CompareopContext *_localctx = _tracker.createInstance<CompareopContext>(_ctx, getState());
  enterRule(_localctx, 54, ASPCore2Parser::RuleCompareop);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(442);
    _la = _input->LA(1);
    if (!(_la == ASPCore2Parser::EQUAL

    || _la == ASPCore2Parser::UNEQUAL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BinopContext ------------------------------------------------------------------

ASPCore2Parser::BinopContext::BinopContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::CompareopContext* ASPCore2Parser::BinopContext::compareop() {
  return getRuleContext<ASPCore2Parser::CompareopContext>(0);
}

ASPCore2Parser::LeftwardopContext* ASPCore2Parser::BinopContext::leftwardop() {
  return getRuleContext<ASPCore2Parser::LeftwardopContext>(0);
}

ASPCore2Parser::RightwardopContext* ASPCore2Parser::BinopContext::rightwardop() {
  return getRuleContext<ASPCore2Parser::RightwardopContext>(0);
}


size_t ASPCore2Parser::BinopContext::getRuleIndex() const {
  return ASPCore2Parser::RuleBinop;
}

void ASPCore2Parser::BinopContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinop(this);
}

void ASPCore2Parser::BinopContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinop(this);
}

ASPCore2Parser::BinopContext* ASPCore2Parser::binop() {
  BinopContext *_localctx = _tracker.createInstance<BinopContext>(_ctx, getState());
  enterRule(_localctx, 56, ASPCore2Parser::RuleBinop);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(448);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(444);
      compareop();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(445);
      compareop();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(446);
      leftwardop();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(447);
      rightwardop();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Arithop1Context ------------------------------------------------------------------

ASPCore2Parser::Arithop1Context::Arithop1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Arithop1Context::PLUS() {
  return getToken(ASPCore2Parser::PLUS, 0);
}

tree::TerminalNode* ASPCore2Parser::Arithop1Context::DASH() {
  return getToken(ASPCore2Parser::DASH, 0);
}


size_t ASPCore2Parser::Arithop1Context::getRuleIndex() const {
  return ASPCore2Parser::RuleArithop1;
}

void ASPCore2Parser::Arithop1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithop1(this);
}

void ASPCore2Parser::Arithop1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithop1(this);
}

ASPCore2Parser::Arithop1Context* ASPCore2Parser::arithop1() {
  Arithop1Context *_localctx = _tracker.createInstance<Arithop1Context>(_ctx, getState());
  enterRule(_localctx, 58, ASPCore2Parser::RuleArithop1);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(450);
    _la = _input->LA(1);
    if (!(_la == ASPCore2Parser::PLUS

    || _la == ASPCore2Parser::DASH)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Arithop2Context ------------------------------------------------------------------

ASPCore2Parser::Arithop2Context::Arithop2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Arithop2Context::TIMES() {
  return getToken(ASPCore2Parser::TIMES, 0);
}

tree::TerminalNode* ASPCore2Parser::Arithop2Context::SLASH() {
  return getToken(ASPCore2Parser::SLASH, 0);
}

tree::TerminalNode* ASPCore2Parser::Arithop2Context::BACK_SLASH() {
  return getToken(ASPCore2Parser::BACK_SLASH, 0);
}


size_t ASPCore2Parser::Arithop2Context::getRuleIndex() const {
  return ASPCore2Parser::RuleArithop2;
}

void ASPCore2Parser::Arithop2Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithop2(this);
}

void ASPCore2Parser::Arithop2Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithop2(this);
}

ASPCore2Parser::Arithop2Context* ASPCore2Parser::arithop2() {
  Arithop2Context *_localctx = _tracker.createInstance<Arithop2Context>(_ctx, getState());
  enterRule(_localctx, 60, ASPCore2Parser::RuleArithop2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(452);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ASPCore2Parser::TIMES)
      | (1ULL << ASPCore2Parser::SLASH)
      | (1ULL << ASPCore2Parser::BACK_SLASH))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Term_Context ------------------------------------------------------------------

ASPCore2Parser::Term_Context::Term_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Term_Context::ANON_VAR() {
  return getToken(ASPCore2Parser::ANON_VAR, 0);
}

ASPCore2Parser::IdentifierContext* ASPCore2Parser::Term_Context::identifier() {
  return getRuleContext<ASPCore2Parser::IdentifierContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Term_Context::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

ASPCore2Parser::TermsContext* ASPCore2Parser::Term_Context::terms() {
  return getRuleContext<ASPCore2Parser::TermsContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Term_Context::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

std::vector<tree::TerminalNode *> ASPCore2Parser::Term_Context::NUMBER() {
  return getTokens(ASPCore2Parser::NUMBER);
}

tree::TerminalNode* ASPCore2Parser::Term_Context::NUMBER(size_t i) {
  return getToken(ASPCore2Parser::NUMBER, i);
}

tree::TerminalNode* ASPCore2Parser::Term_Context::DDOT() {
  return getToken(ASPCore2Parser::DDOT, 0);
}

tree::TerminalNode* ASPCore2Parser::Term_Context::DASH() {
  return getToken(ASPCore2Parser::DASH, 0);
}

ASPCore2Parser::TermContext* ASPCore2Parser::Term_Context::term() {
  return getRuleContext<ASPCore2Parser::TermContext>(0);
}


size_t ASPCore2Parser::Term_Context::getRuleIndex() const {
  return ASPCore2Parser::RuleTerm_;
}

void ASPCore2Parser::Term_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTerm_(this);
}

void ASPCore2Parser::Term_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTerm_(this);
}

ASPCore2Parser::Term_Context* ASPCore2Parser::term_() {
  Term_Context *_localctx = _tracker.createInstance<Term_Context>(_ctx, getState());
  enterRule(_localctx, 62, ASPCore2Parser::RuleTerm_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(465);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ASPCore2Parser::ANON_VAR: {
        enterOuterAlt(_localctx, 1);
        setState(454);
        match(ASPCore2Parser::ANON_VAR);
        break;
      }

      case ASPCore2Parser::SYMBOLIC_CONSTANT:
      case ASPCore2Parser::VARIABLE:
      case ASPCore2Parser::STRING: {
        enterOuterAlt(_localctx, 2);
        setState(455);
        identifier();
        setState(456);
        match(ASPCore2Parser::PARAM_OPEN);
        setState(457);
        terms();
        setState(458);
        match(ASPCore2Parser::PARAM_CLOSE);
        break;
      }

      case ASPCore2Parser::NUMBER: {
        enterOuterAlt(_localctx, 3);
        setState(460);
        match(ASPCore2Parser::NUMBER);
        setState(461);
        match(ASPCore2Parser::DDOT);
        setState(462);
        match(ASPCore2Parser::NUMBER);
        break;
      }

      case ASPCore2Parser::DASH: {
        enterOuterAlt(_localctx, 4);
        setState(463);
        match(ASPCore2Parser::DASH);
        setState(464);
        term();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Term__Context ------------------------------------------------------------------

ASPCore2Parser::Term__Context::Term__Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::IdentifierContext* ASPCore2Parser::Term__Context::identifier() {
  return getRuleContext<ASPCore2Parser::IdentifierContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Term__Context::NUMBER() {
  return getToken(ASPCore2Parser::NUMBER, 0);
}

tree::TerminalNode* ASPCore2Parser::Term__Context::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

ASPCore2Parser::TermContext* ASPCore2Parser::Term__Context::term() {
  return getRuleContext<ASPCore2Parser::TermContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Term__Context::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}


size_t ASPCore2Parser::Term__Context::getRuleIndex() const {
  return ASPCore2Parser::RuleTerm__;
}

void ASPCore2Parser::Term__Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTerm__(this);
}

void ASPCore2Parser::Term__Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTerm__(this);
}

ASPCore2Parser::Term__Context* ASPCore2Parser::term__() {
  Term__Context *_localctx = _tracker.createInstance<Term__Context>(_ctx, getState());
  enterRule(_localctx, 64, ASPCore2Parser::RuleTerm__);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(473);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ASPCore2Parser::SYMBOLIC_CONSTANT:
      case ASPCore2Parser::VARIABLE:
      case ASPCore2Parser::STRING: {
        enterOuterAlt(_localctx, 1);
        setState(467);
        identifier();
        break;
      }

      case ASPCore2Parser::NUMBER: {
        enterOuterAlt(_localctx, 2);
        setState(468);
        match(ASPCore2Parser::NUMBER);
        break;
      }

      case ASPCore2Parser::PARAM_OPEN: {
        enterOuterAlt(_localctx, 3);
        setState(469);
        match(ASPCore2Parser::PARAM_OPEN);
        setState(470);
        term();
        setState(471);
        match(ASPCore2Parser::PARAM_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TermContext ------------------------------------------------------------------

ASPCore2Parser::TermContext::TermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Term_Context* ASPCore2Parser::TermContext::term_() {
  return getRuleContext<ASPCore2Parser::Term_Context>(0);
}

ASPCore2Parser::IdentifierContext* ASPCore2Parser::TermContext::identifier() {
  return getRuleContext<ASPCore2Parser::IdentifierContext>(0);
}

ASPCore2Parser::ExprContext* ASPCore2Parser::TermContext::expr() {
  return getRuleContext<ASPCore2Parser::ExprContext>(0);
}


size_t ASPCore2Parser::TermContext::getRuleIndex() const {
  return ASPCore2Parser::RuleTerm;
}

void ASPCore2Parser::TermContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTerm(this);
}

void ASPCore2Parser::TermContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTerm(this);
}

ASPCore2Parser::TermContext* ASPCore2Parser::term() {
  TermContext *_localctx = _tracker.createInstance<TermContext>(_ctx, getState());
  enterRule(_localctx, 66, ASPCore2Parser::RuleTerm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(478);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(475);
      term_();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(476);
      identifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(477);
      expr();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

ASPCore2Parser::ExprContext::ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::FactorContext* ASPCore2Parser::ExprContext::factor() {
  return getRuleContext<ASPCore2Parser::FactorContext>(0);
}

ASPCore2Parser::Arithop1Context* ASPCore2Parser::ExprContext::arithop1() {
  return getRuleContext<ASPCore2Parser::Arithop1Context>(0);
}

ASPCore2Parser::ExprContext* ASPCore2Parser::ExprContext::expr() {
  return getRuleContext<ASPCore2Parser::ExprContext>(0);
}


size_t ASPCore2Parser::ExprContext::getRuleIndex() const {
  return ASPCore2Parser::RuleExpr;
}

void ASPCore2Parser::ExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr(this);
}

void ASPCore2Parser::ExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr(this);
}

ASPCore2Parser::ExprContext* ASPCore2Parser::expr() {
  ExprContext *_localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
  enterRule(_localctx, 68, ASPCore2Parser::RuleExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(485);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(480);
      factor();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(481);
      factor();
      setState(482);
      arithop1();
      setState(483);
      expr();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FactorContext ------------------------------------------------------------------

ASPCore2Parser::FactorContext::FactorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Term__Context* ASPCore2Parser::FactorContext::term__() {
  return getRuleContext<ASPCore2Parser::Term__Context>(0);
}

ASPCore2Parser::Arithop2Context* ASPCore2Parser::FactorContext::arithop2() {
  return getRuleContext<ASPCore2Parser::Arithop2Context>(0);
}

ASPCore2Parser::FactorContext* ASPCore2Parser::FactorContext::factor() {
  return getRuleContext<ASPCore2Parser::FactorContext>(0);
}


size_t ASPCore2Parser::FactorContext::getRuleIndex() const {
  return ASPCore2Parser::RuleFactor;
}

void ASPCore2Parser::FactorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFactor(this);
}

void ASPCore2Parser::FactorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFactor(this);
}

ASPCore2Parser::FactorContext* ASPCore2Parser::factor() {
  FactorContext *_localctx = _tracker.createInstance<FactorContext>(_ctx, getState());
  enterRule(_localctx, 70, ASPCore2Parser::RuleFactor);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(492);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(487);
      term__();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(488);
      term__();
      setState(489);
      arithop2();
      setState(490);
      factor();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Basic_termContext ------------------------------------------------------------------

ASPCore2Parser::Basic_termContext::Basic_termContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Ground_termContext* ASPCore2Parser::Basic_termContext::ground_term() {
  return getRuleContext<ASPCore2Parser::Ground_termContext>(0);
}

ASPCore2Parser::Variable_termContext* ASPCore2Parser::Basic_termContext::variable_term() {
  return getRuleContext<ASPCore2Parser::Variable_termContext>(0);
}

ASPCore2Parser::Functional_termContext* ASPCore2Parser::Basic_termContext::functional_term() {
  return getRuleContext<ASPCore2Parser::Functional_termContext>(0);
}


size_t ASPCore2Parser::Basic_termContext::getRuleIndex() const {
  return ASPCore2Parser::RuleBasic_term;
}

void ASPCore2Parser::Basic_termContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBasic_term(this);
}

void ASPCore2Parser::Basic_termContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBasic_term(this);
}

ASPCore2Parser::Basic_termContext* ASPCore2Parser::basic_term() {
  Basic_termContext *_localctx = _tracker.createInstance<Basic_termContext>(_ctx, getState());
  enterRule(_localctx, 72, ASPCore2Parser::RuleBasic_term);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(497);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(494);
      ground_term();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(495);
      variable_term();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(496);
      functional_term();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Ground_termContext ------------------------------------------------------------------

ASPCore2Parser::Ground_termContext::Ground_termContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Ground_termContext::SYMBOLIC_CONSTANT() {
  return getToken(ASPCore2Parser::SYMBOLIC_CONSTANT, 0);
}

tree::TerminalNode* ASPCore2Parser::Ground_termContext::STRING() {
  return getToken(ASPCore2Parser::STRING, 0);
}

tree::TerminalNode* ASPCore2Parser::Ground_termContext::NUMBER() {
  return getToken(ASPCore2Parser::NUMBER, 0);
}

tree::TerminalNode* ASPCore2Parser::Ground_termContext::DASH() {
  return getToken(ASPCore2Parser::DASH, 0);
}


size_t ASPCore2Parser::Ground_termContext::getRuleIndex() const {
  return ASPCore2Parser::RuleGround_term;
}

void ASPCore2Parser::Ground_termContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGround_term(this);
}

void ASPCore2Parser::Ground_termContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGround_term(this);
}

ASPCore2Parser::Ground_termContext* ASPCore2Parser::ground_term() {
  Ground_termContext *_localctx = _tracker.createInstance<Ground_termContext>(_ctx, getState());
  enterRule(_localctx, 74, ASPCore2Parser::RuleGround_term);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(504);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ASPCore2Parser::SYMBOLIC_CONSTANT: {
        enterOuterAlt(_localctx, 1);
        setState(499);
        match(ASPCore2Parser::SYMBOLIC_CONSTANT);
        break;
      }

      case ASPCore2Parser::STRING: {
        enterOuterAlt(_localctx, 2);
        setState(500);
        match(ASPCore2Parser::STRING);
        break;
      }

      case ASPCore2Parser::NUMBER: {
        enterOuterAlt(_localctx, 3);
        setState(501);
        match(ASPCore2Parser::NUMBER);
        break;
      }

      case ASPCore2Parser::DASH: {
        enterOuterAlt(_localctx, 4);
        setState(502);
        match(ASPCore2Parser::DASH);
        setState(503);
        match(ASPCore2Parser::NUMBER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Variable_termContext ------------------------------------------------------------------

ASPCore2Parser::Variable_termContext::Variable_termContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Variable_termContext::VARIABLE() {
  return getToken(ASPCore2Parser::VARIABLE, 0);
}

tree::TerminalNode* ASPCore2Parser::Variable_termContext::ANON_VAR() {
  return getToken(ASPCore2Parser::ANON_VAR, 0);
}


size_t ASPCore2Parser::Variable_termContext::getRuleIndex() const {
  return ASPCore2Parser::RuleVariable_term;
}

void ASPCore2Parser::Variable_termContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariable_term(this);
}

void ASPCore2Parser::Variable_termContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariable_term(this);
}

ASPCore2Parser::Variable_termContext* ASPCore2Parser::variable_term() {
  Variable_termContext *_localctx = _tracker.createInstance<Variable_termContext>(_ctx, getState());
  enterRule(_localctx, 76, ASPCore2Parser::RuleVariable_term);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(506);
    _la = _input->LA(1);
    if (!(_la == ASPCore2Parser::VARIABLE

    || _la == ASPCore2Parser::ANON_VAR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Functional_termContext ------------------------------------------------------------------

ASPCore2Parser::Functional_termContext::Functional_termContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::IdentifierContext* ASPCore2Parser::Functional_termContext::identifier() {
  return getRuleContext<ASPCore2Parser::IdentifierContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Functional_termContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

ASPCore2Parser::TermsContext* ASPCore2Parser::Functional_termContext::terms() {
  return getRuleContext<ASPCore2Parser::TermsContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Functional_termContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}


size_t ASPCore2Parser::Functional_termContext::getRuleIndex() const {
  return ASPCore2Parser::RuleFunctional_term;
}

void ASPCore2Parser::Functional_termContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctional_term(this);
}

void ASPCore2Parser::Functional_termContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctional_term(this);
}

ASPCore2Parser::Functional_termContext* ASPCore2Parser::functional_term() {
  Functional_termContext *_localctx = _tracker.createInstance<Functional_termContext>(_ctx, getState());
  enterRule(_localctx, 78, ASPCore2Parser::RuleFunctional_term);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(508);
    identifier();
    setState(509);
    match(ASPCore2Parser::PARAM_OPEN);
    setState(510);
    terms();
    setState(511);
    match(ASPCore2Parser::PARAM_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VarsContext ------------------------------------------------------------------

ASPCore2Parser::VarsContext::VarsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::VarsContext::VARIABLE() {
  return getToken(ASPCore2Parser::VARIABLE, 0);
}

tree::TerminalNode* ASPCore2Parser::VarsContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

ASPCore2Parser::VarsContext* ASPCore2Parser::VarsContext::vars() {
  return getRuleContext<ASPCore2Parser::VarsContext>(0);
}


size_t ASPCore2Parser::VarsContext::getRuleIndex() const {
  return ASPCore2Parser::RuleVars;
}

void ASPCore2Parser::VarsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVars(this);
}

void ASPCore2Parser::VarsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVars(this);
}

ASPCore2Parser::VarsContext* ASPCore2Parser::vars() {
  VarsContext *_localctx = _tracker.createInstance<VarsContext>(_ctx, getState());
  enterRule(_localctx, 80, ASPCore2Parser::RuleVars);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(517);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(513);
      match(ASPCore2Parser::VARIABLE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(514);
      match(ASPCore2Parser::VARIABLE);
      setState(515);
      match(ASPCore2Parser::COMMA);
      setState(516);
      vars();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

ASPCore2Parser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::IdentifierContext::SYMBOLIC_CONSTANT() {
  return getToken(ASPCore2Parser::SYMBOLIC_CONSTANT, 0);
}

tree::TerminalNode* ASPCore2Parser::IdentifierContext::STRING() {
  return getToken(ASPCore2Parser::STRING, 0);
}

tree::TerminalNode* ASPCore2Parser::IdentifierContext::VARIABLE() {
  return getToken(ASPCore2Parser::VARIABLE, 0);
}


size_t ASPCore2Parser::IdentifierContext::getRuleIndex() const {
  return ASPCore2Parser::RuleIdentifier;
}

void ASPCore2Parser::IdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifier(this);
}

void ASPCore2Parser::IdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifier(this);
}

ASPCore2Parser::IdentifierContext* ASPCore2Parser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 82, ASPCore2Parser::RuleIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(519);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ASPCore2Parser::SYMBOLIC_CONSTANT)
      | (1ULL << ASPCore2Parser::VARIABLE)
      | (1ULL << ASPCore2Parser::STRING))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DirectiveContext ------------------------------------------------------------------

ASPCore2Parser::DirectiveContext::DirectiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::DirectiveContext::DIRECTIVE_NAME() {
  return getToken(ASPCore2Parser::DIRECTIVE_NAME, 0);
}

tree::TerminalNode* ASPCore2Parser::DirectiveContext::SYMBOLIC_CONSTANT() {
  return getToken(ASPCore2Parser::SYMBOLIC_CONSTANT, 0);
}

tree::TerminalNode* ASPCore2Parser::DirectiveContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

ASPCore2Parser::Directive_typesContext* ASPCore2Parser::DirectiveContext::directive_types() {
  return getRuleContext<ASPCore2Parser::Directive_typesContext>(0);
}

tree::TerminalNode* ASPCore2Parser::DirectiveContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::DirectiveContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::DirectiveContext::getRuleIndex() const {
  return ASPCore2Parser::RuleDirective;
}

void ASPCore2Parser::DirectiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDirective(this);
}

void ASPCore2Parser::DirectiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDirective(this);
}

ASPCore2Parser::DirectiveContext* ASPCore2Parser::directive() {
  DirectiveContext *_localctx = _tracker.createInstance<DirectiveContext>(_ctx, getState());
  enterRule(_localctx, 84, ASPCore2Parser::RuleDirective);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(521);
    match(ASPCore2Parser::DIRECTIVE_NAME);
    setState(522);
    match(ASPCore2Parser::SYMBOLIC_CONSTANT);
    setState(523);
    match(ASPCore2Parser::PARAM_OPEN);
    setState(524);
    directive_types();
    setState(525);
    match(ASPCore2Parser::PARAM_CLOSE);
    setState(526);
    match(ASPCore2Parser::DOT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Directive_typesContext ------------------------------------------------------------------

ASPCore2Parser::Directive_typesContext::Directive_typesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Directive_valContext* ASPCore2Parser::Directive_typesContext::directive_val() {
  return getRuleContext<ASPCore2Parser::Directive_valContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Directive_typesContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

ASPCore2Parser::Directive_typesContext* ASPCore2Parser::Directive_typesContext::directive_types() {
  return getRuleContext<ASPCore2Parser::Directive_typesContext>(0);
}


size_t ASPCore2Parser::Directive_typesContext::getRuleIndex() const {
  return ASPCore2Parser::RuleDirective_types;
}

void ASPCore2Parser::Directive_typesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDirective_types(this);
}

void ASPCore2Parser::Directive_typesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDirective_types(this);
}

ASPCore2Parser::Directive_typesContext* ASPCore2Parser::directive_types() {
  Directive_typesContext *_localctx = _tracker.createInstance<Directive_typesContext>(_ctx, getState());
  enterRule(_localctx, 86, ASPCore2Parser::RuleDirective_types);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(533);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(528);
      directive_val();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(529);
      directive_val();
      setState(530);
      match(ASPCore2Parser::COMMA);
      setState(531);
      directive_types();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Directive_valContext ------------------------------------------------------------------

ASPCore2Parser::Directive_valContext::Directive_valContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Directive_valContext::DIRECTIVE_VALUE_INT() {
  return getToken(ASPCore2Parser::DIRECTIVE_VALUE_INT, 0);
}

tree::TerminalNode* ASPCore2Parser::Directive_valContext::DIRECTIVE_VALUE_STRING() {
  return getToken(ASPCore2Parser::DIRECTIVE_VALUE_STRING, 0);
}


size_t ASPCore2Parser::Directive_valContext::getRuleIndex() const {
  return ASPCore2Parser::RuleDirective_val;
}

void ASPCore2Parser::Directive_valContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDirective_val(this);
}

void ASPCore2Parser::Directive_valContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDirective_val(this);
}

ASPCore2Parser::Directive_valContext* ASPCore2Parser::directive_val() {
  Directive_valContext *_localctx = _tracker.createInstance<Directive_valContext>(_ctx, getState());
  enterRule(_localctx, 88, ASPCore2Parser::RuleDirective_val);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(535);
    _la = _input->LA(1);
    if (!(_la == ASPCore2Parser::DIRECTIVE_VALUE_INT

    || _la == ASPCore2Parser::DIRECTIVE_VALUE_STRING)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QueryContext ------------------------------------------------------------------

ASPCore2Parser::QueryContext::QueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::AtomContext* ASPCore2Parser::QueryContext::atom() {
  return getRuleContext<ASPCore2Parser::AtomContext>(0);
}

tree::TerminalNode* ASPCore2Parser::QueryContext::QUERY_MARK() {
  return getToken(ASPCore2Parser::QUERY_MARK, 0);
}


size_t ASPCore2Parser::QueryContext::getRuleIndex() const {
  return ASPCore2Parser::RuleQuery;
}

void ASPCore2Parser::QueryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuery(this);
}

void ASPCore2Parser::QueryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuery(this);
}

ASPCore2Parser::QueryContext* ASPCore2Parser::query() {
  QueryContext *_localctx = _tracker.createInstance<QueryContext>(_ctx, getState());
  enterRule(_localctx, 90, ASPCore2Parser::RuleQuery);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(537);
    atom();
    setState(538);
    match(ASPCore2Parser::QUERY_MARK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lower_guard_compare_aggregateContext ------------------------------------------------------------------

ASPCore2Parser::Lower_guard_compare_aggregateContext::Lower_guard_compare_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::TermContext* ASPCore2Parser::Lower_guard_compare_aggregateContext::term() {
  return getRuleContext<ASPCore2Parser::TermContext>(0);
}

ASPCore2Parser::CompareopContext* ASPCore2Parser::Lower_guard_compare_aggregateContext::compareop() {
  return getRuleContext<ASPCore2Parser::CompareopContext>(0);
}


size_t ASPCore2Parser::Lower_guard_compare_aggregateContext::getRuleIndex() const {
  return ASPCore2Parser::RuleLower_guard_compare_aggregate;
}

void ASPCore2Parser::Lower_guard_compare_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLower_guard_compare_aggregate(this);
}

void ASPCore2Parser::Lower_guard_compare_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLower_guard_compare_aggregate(this);
}

ASPCore2Parser::Lower_guard_compare_aggregateContext* ASPCore2Parser::lower_guard_compare_aggregate() {
  Lower_guard_compare_aggregateContext *_localctx = _tracker.createInstance<Lower_guard_compare_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 92, ASPCore2Parser::RuleLower_guard_compare_aggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(540);
    term();
    setState(541);
    compareop();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Upper_guard_compare_aggregateContext ------------------------------------------------------------------

ASPCore2Parser::Upper_guard_compare_aggregateContext::Upper_guard_compare_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::CompareopContext* ASPCore2Parser::Upper_guard_compare_aggregateContext::compareop() {
  return getRuleContext<ASPCore2Parser::CompareopContext>(0);
}

ASPCore2Parser::TermContext* ASPCore2Parser::Upper_guard_compare_aggregateContext::term() {
  return getRuleContext<ASPCore2Parser::TermContext>(0);
}


size_t ASPCore2Parser::Upper_guard_compare_aggregateContext::getRuleIndex() const {
  return ASPCore2Parser::RuleUpper_guard_compare_aggregate;
}

void ASPCore2Parser::Upper_guard_compare_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUpper_guard_compare_aggregate(this);
}

void ASPCore2Parser::Upper_guard_compare_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUpper_guard_compare_aggregate(this);
}

ASPCore2Parser::Upper_guard_compare_aggregateContext* ASPCore2Parser::upper_guard_compare_aggregate() {
  Upper_guard_compare_aggregateContext *_localctx = _tracker.createInstance<Upper_guard_compare_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 94, ASPCore2Parser::RuleUpper_guard_compare_aggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(543);
    compareop();
    setState(544);
    term();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Compare_aggregateContext ------------------------------------------------------------------

ASPCore2Parser::Compare_aggregateContext::Compare_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Lower_guard_compare_aggregateContext* ASPCore2Parser::Compare_aggregateContext::lower_guard_compare_aggregate() {
  return getRuleContext<ASPCore2Parser::Lower_guard_compare_aggregateContext>(0);
}

ASPCore2Parser::AggregateContext* ASPCore2Parser::Compare_aggregateContext::aggregate() {
  return getRuleContext<ASPCore2Parser::AggregateContext>(0);
}

ASPCore2Parser::Upper_guard_compare_aggregateContext* ASPCore2Parser::Compare_aggregateContext::upper_guard_compare_aggregate() {
  return getRuleContext<ASPCore2Parser::Upper_guard_compare_aggregateContext>(0);
}


size_t ASPCore2Parser::Compare_aggregateContext::getRuleIndex() const {
  return ASPCore2Parser::RuleCompare_aggregate;
}

void ASPCore2Parser::Compare_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCompare_aggregate(this);
}

void ASPCore2Parser::Compare_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCompare_aggregate(this);
}

ASPCore2Parser::Compare_aggregateContext* ASPCore2Parser::compare_aggregate() {
  Compare_aggregateContext *_localctx = _tracker.createInstance<Compare_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 96, ASPCore2Parser::RuleCompare_aggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(552);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ASPCore2Parser::SYMBOLIC_CONSTANT:
      case ASPCore2Parser::VARIABLE:
      case ASPCore2Parser::STRING:
      case ASPCore2Parser::NUMBER:
      case ASPCore2Parser::DASH:
      case ASPCore2Parser::PARAM_OPEN:
      case ASPCore2Parser::ANON_VAR: {
        enterOuterAlt(_localctx, 1);
        setState(546);
        lower_guard_compare_aggregate();
        setState(547);
        aggregate();
        break;
      }

      case ASPCore2Parser::AGGR_COUNT:
      case ASPCore2Parser::AGGR_MAX:
      case ASPCore2Parser::AGGR_MIN:
      case ASPCore2Parser::AGGR_SUM: {
        enterOuterAlt(_localctx, 2);
        setState(549);
        aggregate();
        setState(550);
        upper_guard_compare_aggregate();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lower_guard_leftward_left_aggregateContext ------------------------------------------------------------------

ASPCore2Parser::Lower_guard_leftward_left_aggregateContext::Lower_guard_leftward_left_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::TermContext* ASPCore2Parser::Lower_guard_leftward_left_aggregateContext::term() {
  return getRuleContext<ASPCore2Parser::TermContext>(0);
}

ASPCore2Parser::LeftwardopContext* ASPCore2Parser::Lower_guard_leftward_left_aggregateContext::leftwardop() {
  return getRuleContext<ASPCore2Parser::LeftwardopContext>(0);
}


size_t ASPCore2Parser::Lower_guard_leftward_left_aggregateContext::getRuleIndex() const {
  return ASPCore2Parser::RuleLower_guard_leftward_left_aggregate;
}

void ASPCore2Parser::Lower_guard_leftward_left_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLower_guard_leftward_left_aggregate(this);
}

void ASPCore2Parser::Lower_guard_leftward_left_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLower_guard_leftward_left_aggregate(this);
}

ASPCore2Parser::Lower_guard_leftward_left_aggregateContext* ASPCore2Parser::lower_guard_leftward_left_aggregate() {
  Lower_guard_leftward_left_aggregateContext *_localctx = _tracker.createInstance<Lower_guard_leftward_left_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 98, ASPCore2Parser::RuleLower_guard_leftward_left_aggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(554);
    term();
    setState(555);
    leftwardop();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Leftward_left_aggregateContext ------------------------------------------------------------------

ASPCore2Parser::Leftward_left_aggregateContext::Leftward_left_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Lower_guard_leftward_left_aggregateContext* ASPCore2Parser::Leftward_left_aggregateContext::lower_guard_leftward_left_aggregate() {
  return getRuleContext<ASPCore2Parser::Lower_guard_leftward_left_aggregateContext>(0);
}

ASPCore2Parser::AggregateContext* ASPCore2Parser::Leftward_left_aggregateContext::aggregate() {
  return getRuleContext<ASPCore2Parser::AggregateContext>(0);
}


size_t ASPCore2Parser::Leftward_left_aggregateContext::getRuleIndex() const {
  return ASPCore2Parser::RuleLeftward_left_aggregate;
}

void ASPCore2Parser::Leftward_left_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLeftward_left_aggregate(this);
}

void ASPCore2Parser::Leftward_left_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLeftward_left_aggregate(this);
}

ASPCore2Parser::Leftward_left_aggregateContext* ASPCore2Parser::leftward_left_aggregate() {
  Leftward_left_aggregateContext *_localctx = _tracker.createInstance<Leftward_left_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 100, ASPCore2Parser::RuleLeftward_left_aggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(557);
    lower_guard_leftward_left_aggregate();
    setState(558);
    aggregate();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Left_aggregateContext ------------------------------------------------------------------

ASPCore2Parser::Left_aggregateContext::Left_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Leftward_left_aggregateContext* ASPCore2Parser::Left_aggregateContext::leftward_left_aggregate() {
  return getRuleContext<ASPCore2Parser::Leftward_left_aggregateContext>(0);
}

ASPCore2Parser::Rightward_left_aggregateContext* ASPCore2Parser::Left_aggregateContext::rightward_left_aggregate() {
  return getRuleContext<ASPCore2Parser::Rightward_left_aggregateContext>(0);
}


size_t ASPCore2Parser::Left_aggregateContext::getRuleIndex() const {
  return ASPCore2Parser::RuleLeft_aggregate;
}

void ASPCore2Parser::Left_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLeft_aggregate(this);
}

void ASPCore2Parser::Left_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLeft_aggregate(this);
}

ASPCore2Parser::Left_aggregateContext* ASPCore2Parser::left_aggregate() {
  Left_aggregateContext *_localctx = _tracker.createInstance<Left_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 102, ASPCore2Parser::RuleLeft_aggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(562);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(560);
      leftward_left_aggregate();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(561);
      rightward_left_aggregate();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Lower_guard_rightward_left_aggregateContext ------------------------------------------------------------------

ASPCore2Parser::Lower_guard_rightward_left_aggregateContext::Lower_guard_rightward_left_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::TermContext* ASPCore2Parser::Lower_guard_rightward_left_aggregateContext::term() {
  return getRuleContext<ASPCore2Parser::TermContext>(0);
}

ASPCore2Parser::RightwardopContext* ASPCore2Parser::Lower_guard_rightward_left_aggregateContext::rightwardop() {
  return getRuleContext<ASPCore2Parser::RightwardopContext>(0);
}


size_t ASPCore2Parser::Lower_guard_rightward_left_aggregateContext::getRuleIndex() const {
  return ASPCore2Parser::RuleLower_guard_rightward_left_aggregate;
}

void ASPCore2Parser::Lower_guard_rightward_left_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLower_guard_rightward_left_aggregate(this);
}

void ASPCore2Parser::Lower_guard_rightward_left_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLower_guard_rightward_left_aggregate(this);
}

ASPCore2Parser::Lower_guard_rightward_left_aggregateContext* ASPCore2Parser::lower_guard_rightward_left_aggregate() {
  Lower_guard_rightward_left_aggregateContext *_localctx = _tracker.createInstance<Lower_guard_rightward_left_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 104, ASPCore2Parser::RuleLower_guard_rightward_left_aggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(564);
    term();
    setState(565);
    rightwardop();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rightward_left_aggregateContext ------------------------------------------------------------------

ASPCore2Parser::Rightward_left_aggregateContext::Rightward_left_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Lower_guard_rightward_left_aggregateContext* ASPCore2Parser::Rightward_left_aggregateContext::lower_guard_rightward_left_aggregate() {
  return getRuleContext<ASPCore2Parser::Lower_guard_rightward_left_aggregateContext>(0);
}

ASPCore2Parser::AggregateContext* ASPCore2Parser::Rightward_left_aggregateContext::aggregate() {
  return getRuleContext<ASPCore2Parser::AggregateContext>(0);
}


size_t ASPCore2Parser::Rightward_left_aggregateContext::getRuleIndex() const {
  return ASPCore2Parser::RuleRightward_left_aggregate;
}

void ASPCore2Parser::Rightward_left_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRightward_left_aggregate(this);
}

void ASPCore2Parser::Rightward_left_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRightward_left_aggregate(this);
}

ASPCore2Parser::Rightward_left_aggregateContext* ASPCore2Parser::rightward_left_aggregate() {
  Rightward_left_aggregateContext *_localctx = _tracker.createInstance<Rightward_left_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 106, ASPCore2Parser::RuleRightward_left_aggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(567);
    lower_guard_rightward_left_aggregate();
    setState(568);
    aggregate();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Upper_guard_leftward_right_aggregateContext ------------------------------------------------------------------

ASPCore2Parser::Upper_guard_leftward_right_aggregateContext::Upper_guard_leftward_right_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::LeftwardopContext* ASPCore2Parser::Upper_guard_leftward_right_aggregateContext::leftwardop() {
  return getRuleContext<ASPCore2Parser::LeftwardopContext>(0);
}

ASPCore2Parser::TermContext* ASPCore2Parser::Upper_guard_leftward_right_aggregateContext::term() {
  return getRuleContext<ASPCore2Parser::TermContext>(0);
}


size_t ASPCore2Parser::Upper_guard_leftward_right_aggregateContext::getRuleIndex() const {
  return ASPCore2Parser::RuleUpper_guard_leftward_right_aggregate;
}

void ASPCore2Parser::Upper_guard_leftward_right_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUpper_guard_leftward_right_aggregate(this);
}

void ASPCore2Parser::Upper_guard_leftward_right_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUpper_guard_leftward_right_aggregate(this);
}

ASPCore2Parser::Upper_guard_leftward_right_aggregateContext* ASPCore2Parser::upper_guard_leftward_right_aggregate() {
  Upper_guard_leftward_right_aggregateContext *_localctx = _tracker.createInstance<Upper_guard_leftward_right_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 108, ASPCore2Parser::RuleUpper_guard_leftward_right_aggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(570);
    leftwardop();
    setState(571);
    term();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Upper_guard_rightward_right_aggregateContext ------------------------------------------------------------------

ASPCore2Parser::Upper_guard_rightward_right_aggregateContext::Upper_guard_rightward_right_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::RightwardopContext* ASPCore2Parser::Upper_guard_rightward_right_aggregateContext::rightwardop() {
  return getRuleContext<ASPCore2Parser::RightwardopContext>(0);
}

ASPCore2Parser::TermContext* ASPCore2Parser::Upper_guard_rightward_right_aggregateContext::term() {
  return getRuleContext<ASPCore2Parser::TermContext>(0);
}


size_t ASPCore2Parser::Upper_guard_rightward_right_aggregateContext::getRuleIndex() const {
  return ASPCore2Parser::RuleUpper_guard_rightward_right_aggregate;
}

void ASPCore2Parser::Upper_guard_rightward_right_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUpper_guard_rightward_right_aggregate(this);
}

void ASPCore2Parser::Upper_guard_rightward_right_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUpper_guard_rightward_right_aggregate(this);
}

ASPCore2Parser::Upper_guard_rightward_right_aggregateContext* ASPCore2Parser::upper_guard_rightward_right_aggregate() {
  Upper_guard_rightward_right_aggregateContext *_localctx = _tracker.createInstance<Upper_guard_rightward_right_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 110, ASPCore2Parser::RuleUpper_guard_rightward_right_aggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(573);
    rightwardop();
    setState(574);
    term();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Right_aggregateContext ------------------------------------------------------------------

ASPCore2Parser::Right_aggregateContext::Right_aggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::AggregateContext* ASPCore2Parser::Right_aggregateContext::aggregate() {
  return getRuleContext<ASPCore2Parser::AggregateContext>(0);
}

ASPCore2Parser::Upper_guard_leftward_right_aggregateContext* ASPCore2Parser::Right_aggregateContext::upper_guard_leftward_right_aggregate() {
  return getRuleContext<ASPCore2Parser::Upper_guard_leftward_right_aggregateContext>(0);
}

ASPCore2Parser::Upper_guard_rightward_right_aggregateContext* ASPCore2Parser::Right_aggregateContext::upper_guard_rightward_right_aggregate() {
  return getRuleContext<ASPCore2Parser::Upper_guard_rightward_right_aggregateContext>(0);
}


size_t ASPCore2Parser::Right_aggregateContext::getRuleIndex() const {
  return ASPCore2Parser::RuleRight_aggregate;
}

void ASPCore2Parser::Right_aggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRight_aggregate(this);
}

void ASPCore2Parser::Right_aggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRight_aggregate(this);
}

ASPCore2Parser::Right_aggregateContext* ASPCore2Parser::right_aggregate() {
  Right_aggregateContext *_localctx = _tracker.createInstance<Right_aggregateContext>(_ctx, getState());
  enterRule(_localctx, 112, ASPCore2Parser::RuleRight_aggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(582);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(576);
      aggregate();
      setState(577);
      upper_guard_leftward_right_aggregate();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(579);
      aggregate();
      setState(580);
      upper_guard_rightward_right_aggregate();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Aggregate_atomContext ------------------------------------------------------------------

ASPCore2Parser::Aggregate_atomContext::Aggregate_atomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Left_aggregateContext* ASPCore2Parser::Aggregate_atomContext::left_aggregate() {
  return getRuleContext<ASPCore2Parser::Left_aggregateContext>(0);
}

ASPCore2Parser::Right_aggregateContext* ASPCore2Parser::Aggregate_atomContext::right_aggregate() {
  return getRuleContext<ASPCore2Parser::Right_aggregateContext>(0);
}

ASPCore2Parser::Compare_aggregateContext* ASPCore2Parser::Aggregate_atomContext::compare_aggregate() {
  return getRuleContext<ASPCore2Parser::Compare_aggregateContext>(0);
}

ASPCore2Parser::Leftward_left_aggregateContext* ASPCore2Parser::Aggregate_atomContext::leftward_left_aggregate() {
  return getRuleContext<ASPCore2Parser::Leftward_left_aggregateContext>(0);
}

ASPCore2Parser::Upper_guard_leftward_right_aggregateContext* ASPCore2Parser::Aggregate_atomContext::upper_guard_leftward_right_aggregate() {
  return getRuleContext<ASPCore2Parser::Upper_guard_leftward_right_aggregateContext>(0);
}

ASPCore2Parser::Rightward_left_aggregateContext* ASPCore2Parser::Aggregate_atomContext::rightward_left_aggregate() {
  return getRuleContext<ASPCore2Parser::Rightward_left_aggregateContext>(0);
}

ASPCore2Parser::Upper_guard_rightward_right_aggregateContext* ASPCore2Parser::Aggregate_atomContext::upper_guard_rightward_right_aggregate() {
  return getRuleContext<ASPCore2Parser::Upper_guard_rightward_right_aggregateContext>(0);
}


size_t ASPCore2Parser::Aggregate_atomContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAggregate_atom;
}

void ASPCore2Parser::Aggregate_atomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAggregate_atom(this);
}

void ASPCore2Parser::Aggregate_atomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAggregate_atom(this);
}

ASPCore2Parser::Aggregate_atomContext* ASPCore2Parser::aggregate_atom() {
  Aggregate_atomContext *_localctx = _tracker.createInstance<Aggregate_atomContext>(_ctx, getState());
  enterRule(_localctx, 114, ASPCore2Parser::RuleAggregate_atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(593);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(584);
      left_aggregate();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(585);
      right_aggregate();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(586);
      compare_aggregate();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(587);
      leftward_left_aggregate();
      setState(588);
      upper_guard_leftward_right_aggregate();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(590);
      rightward_left_aggregate();
      setState(591);
      upper_guard_rightward_right_aggregate();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LeftwardopContext ------------------------------------------------------------------

ASPCore2Parser::LeftwardopContext::LeftwardopContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::LeftwardopContext::LESS() {
  return getToken(ASPCore2Parser::LESS, 0);
}

tree::TerminalNode* ASPCore2Parser::LeftwardopContext::LESS_OR_EQ() {
  return getToken(ASPCore2Parser::LESS_OR_EQ, 0);
}


size_t ASPCore2Parser::LeftwardopContext::getRuleIndex() const {
  return ASPCore2Parser::RuleLeftwardop;
}

void ASPCore2Parser::LeftwardopContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLeftwardop(this);
}

void ASPCore2Parser::LeftwardopContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLeftwardop(this);
}

ASPCore2Parser::LeftwardopContext* ASPCore2Parser::leftwardop() {
  LeftwardopContext *_localctx = _tracker.createInstance<LeftwardopContext>(_ctx, getState());
  enterRule(_localctx, 116, ASPCore2Parser::RuleLeftwardop);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(595);
    _la = _input->LA(1);
    if (!(_la == ASPCore2Parser::LESS

    || _la == ASPCore2Parser::LESS_OR_EQ)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RightwardopContext ------------------------------------------------------------------

ASPCore2Parser::RightwardopContext::RightwardopContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::RightwardopContext::GREATER() {
  return getToken(ASPCore2Parser::GREATER, 0);
}

tree::TerminalNode* ASPCore2Parser::RightwardopContext::GREATER_OR_EQ() {
  return getToken(ASPCore2Parser::GREATER_OR_EQ, 0);
}


size_t ASPCore2Parser::RightwardopContext::getRuleIndex() const {
  return ASPCore2Parser::RuleRightwardop;
}

void ASPCore2Parser::RightwardopContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRightwardop(this);
}

void ASPCore2Parser::RightwardopContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRightwardop(this);
}

ASPCore2Parser::RightwardopContext* ASPCore2Parser::rightwardop() {
  RightwardopContext *_localctx = _tracker.createInstance<RightwardopContext>(_ctx, getState());
  enterRule(_localctx, 118, ASPCore2Parser::RuleRightwardop);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(597);
    _la = _input->LA(1);
    if (!(_la == ASPCore2Parser::GREATER

    || _la == ASPCore2Parser::GREATER_OR_EQ)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AggregateContext ------------------------------------------------------------------

ASPCore2Parser::AggregateContext::AggregateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Aggregate_functionContext* ASPCore2Parser::AggregateContext::aggregate_function() {
  return getRuleContext<ASPCore2Parser::Aggregate_functionContext>(0);
}

tree::TerminalNode* ASPCore2Parser::AggregateContext::CURLY_OPEN() {
  return getToken(ASPCore2Parser::CURLY_OPEN, 0);
}

ASPCore2Parser::Aggregate_elementsContext* ASPCore2Parser::AggregateContext::aggregate_elements() {
  return getRuleContext<ASPCore2Parser::Aggregate_elementsContext>(0);
}

tree::TerminalNode* ASPCore2Parser::AggregateContext::CURLY_CLOSE() {
  return getToken(ASPCore2Parser::CURLY_CLOSE, 0);
}


size_t ASPCore2Parser::AggregateContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAggregate;
}

void ASPCore2Parser::AggregateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAggregate(this);
}

void ASPCore2Parser::AggregateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAggregate(this);
}

ASPCore2Parser::AggregateContext* ASPCore2Parser::aggregate() {
  AggregateContext *_localctx = _tracker.createInstance<AggregateContext>(_ctx, getState());
  enterRule(_localctx, 120, ASPCore2Parser::RuleAggregate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(608);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(599);
      aggregate_function();
      setState(600);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(601);
      aggregate_elements();
      setState(602);
      match(ASPCore2Parser::CURLY_CLOSE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(604);
      aggregate_function();
      setState(605);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(606);
      match(ASPCore2Parser::CURLY_CLOSE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Aggregate_elementsContext ------------------------------------------------------------------

ASPCore2Parser::Aggregate_elementsContext::Aggregate_elementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Aggregate_elementContext* ASPCore2Parser::Aggregate_elementsContext::aggregate_element() {
  return getRuleContext<ASPCore2Parser::Aggregate_elementContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Aggregate_elementsContext::SEMICOLON() {
  return getToken(ASPCore2Parser::SEMICOLON, 0);
}

ASPCore2Parser::Aggregate_elementsContext* ASPCore2Parser::Aggregate_elementsContext::aggregate_elements() {
  return getRuleContext<ASPCore2Parser::Aggregate_elementsContext>(0);
}


size_t ASPCore2Parser::Aggregate_elementsContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAggregate_elements;
}

void ASPCore2Parser::Aggregate_elementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAggregate_elements(this);
}

void ASPCore2Parser::Aggregate_elementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAggregate_elements(this);
}

ASPCore2Parser::Aggregate_elementsContext* ASPCore2Parser::aggregate_elements() {
  Aggregate_elementsContext *_localctx = _tracker.createInstance<Aggregate_elementsContext>(_ctx, getState());
  enterRule(_localctx, 122, ASPCore2Parser::RuleAggregate_elements);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(615);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(610);
      aggregate_element();
      setState(611);
      match(ASPCore2Parser::SEMICOLON);
      setState(612);
      aggregate_elements();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(614);
      aggregate_element();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Aggregate_elementContext ------------------------------------------------------------------

ASPCore2Parser::Aggregate_elementContext::Aggregate_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Basic_termsContext* ASPCore2Parser::Aggregate_elementContext::basic_terms() {
  return getRuleContext<ASPCore2Parser::Basic_termsContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Aggregate_elementContext::COLON() {
  return getToken(ASPCore2Parser::COLON, 0);
}

ASPCore2Parser::Naf_literalsContext* ASPCore2Parser::Aggregate_elementContext::naf_literals() {
  return getRuleContext<ASPCore2Parser::Naf_literalsContext>(0);
}


size_t ASPCore2Parser::Aggregate_elementContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAggregate_element;
}

void ASPCore2Parser::Aggregate_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAggregate_element(this);
}

void ASPCore2Parser::Aggregate_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAggregate_element(this);
}

ASPCore2Parser::Aggregate_elementContext* ASPCore2Parser::aggregate_element() {
  Aggregate_elementContext *_localctx = _tracker.createInstance<Aggregate_elementContext>(_ctx, getState());
  enterRule(_localctx, 124, ASPCore2Parser::RuleAggregate_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(617);
    basic_terms();
    setState(618);
    match(ASPCore2Parser::COLON);
    setState(619);
    naf_literals();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Aggregate_functionContext ------------------------------------------------------------------

ASPCore2Parser::Aggregate_functionContext::Aggregate_functionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Aggregate_functionContext::AGGR_COUNT() {
  return getToken(ASPCore2Parser::AGGR_COUNT, 0);
}

tree::TerminalNode* ASPCore2Parser::Aggregate_functionContext::AGGR_MAX() {
  return getToken(ASPCore2Parser::AGGR_MAX, 0);
}

tree::TerminalNode* ASPCore2Parser::Aggregate_functionContext::AGGR_MIN() {
  return getToken(ASPCore2Parser::AGGR_MIN, 0);
}

tree::TerminalNode* ASPCore2Parser::Aggregate_functionContext::AGGR_SUM() {
  return getToken(ASPCore2Parser::AGGR_SUM, 0);
}


size_t ASPCore2Parser::Aggregate_functionContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAggregate_function;
}

void ASPCore2Parser::Aggregate_functionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAggregate_function(this);
}

void ASPCore2Parser::Aggregate_functionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAggregate_function(this);
}

ASPCore2Parser::Aggregate_functionContext* ASPCore2Parser::aggregate_function() {
  Aggregate_functionContext *_localctx = _tracker.createInstance<Aggregate_functionContext>(_ctx, getState());
  enterRule(_localctx, 126, ASPCore2Parser::RuleAggregate_function);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(621);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ASPCore2Parser::AGGR_COUNT)
      | (1ULL << ASPCore2Parser::AGGR_MAX)
      | (1ULL << ASPCore2Parser::AGGR_MIN)
      | (1ULL << ASPCore2Parser::AGGR_SUM))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_globalContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_globalContext::Annotation_globalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Annotation_global_orderingContext* ASPCore2Parser::Annotation_globalContext::annotation_global_ordering() {
  return getRuleContext<ASPCore2Parser::Annotation_global_orderingContext>(0);
}

ASPCore2Parser::Annotation_global_atom_indexedContext* ASPCore2Parser::Annotation_globalContext::annotation_global_atom_indexed() {
  return getRuleContext<ASPCore2Parser::Annotation_global_atom_indexedContext>(0);
}

ASPCore2Parser::Annotation_global_partial_orderContext* ASPCore2Parser::Annotation_globalContext::annotation_global_partial_order() {
  return getRuleContext<ASPCore2Parser::Annotation_global_partial_orderContext>(0);
}

ASPCore2Parser::Annotation_global_extatom_conversionContext* ASPCore2Parser::Annotation_globalContext::annotation_global_extatom_conversion() {
  return getRuleContext<ASPCore2Parser::Annotation_global_extatom_conversionContext>(0);
}

ASPCore2Parser::Annotation_global_wasp_heuristicContext* ASPCore2Parser::Annotation_globalContext::annotation_global_wasp_heuristic() {
  return getRuleContext<ASPCore2Parser::Annotation_global_wasp_heuristicContext>(0);
}

ASPCore2Parser::Annotation_global_wasp_propagatorContext* ASPCore2Parser::Annotation_globalContext::annotation_global_wasp_propagator() {
  return getRuleContext<ASPCore2Parser::Annotation_global_wasp_propagatorContext>(0);
}


size_t ASPCore2Parser::Annotation_globalContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_global;
}

void ASPCore2Parser::Annotation_globalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_global(this);
}

void ASPCore2Parser::Annotation_globalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_global(this);
}

ASPCore2Parser::Annotation_globalContext* ASPCore2Parser::annotation_global() {
  Annotation_globalContext *_localctx = _tracker.createInstance<Annotation_globalContext>(_ctx, getState());
  enterRule(_localctx, 128, ASPCore2Parser::RuleAnnotation_global);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(629);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ASPCore2Parser::ANNOTATION_GLOBAL_ORDERING: {
        enterOuterAlt(_localctx, 1);
        setState(623);
        annotation_global_ordering();
        break;
      }

      case ASPCore2Parser::ANNOTATION_GLOBAL_ATOM_INDEXED: {
        enterOuterAlt(_localctx, 2);
        setState(624);
        annotation_global_atom_indexed();
        break;
      }

      case ASPCore2Parser::ANNOTATION_GLOBAL_PARTIAL_ORDER: {
        enterOuterAlt(_localctx, 3);
        setState(625);
        annotation_global_partial_order();
        break;
      }

      case ASPCore2Parser::ANNOTATION_GLOBAL_EXTATOM_CONVERSION: {
        enterOuterAlt(_localctx, 4);
        setState(626);
        annotation_global_extatom_conversion();
        break;
      }

      case ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC: {
        enterOuterAlt(_localctx, 5);
        setState(627);
        annotation_global_wasp_heuristic();
        break;
      }

      case ASPCore2Parser::ANNOTATION_GLOBAL_WASP_PROPAGATOR: {
        enterOuterAlt(_localctx, 6);
        setState(628);
        annotation_global_wasp_propagator();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotations_ruleContext ------------------------------------------------------------------

ASPCore2Parser::Annotations_ruleContext::Annotations_ruleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Annotation_ruleContext* ASPCore2Parser::Annotations_ruleContext::annotation_rule() {
  return getRuleContext<ASPCore2Parser::Annotation_ruleContext>(0);
}

ASPCore2Parser::Annotations_ruleContext* ASPCore2Parser::Annotations_ruleContext::annotations_rule() {
  return getRuleContext<ASPCore2Parser::Annotations_ruleContext>(0);
}


size_t ASPCore2Parser::Annotations_ruleContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotations_rule;
}

void ASPCore2Parser::Annotations_ruleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotations_rule(this);
}

void ASPCore2Parser::Annotations_ruleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotations_rule(this);
}

ASPCore2Parser::Annotations_ruleContext* ASPCore2Parser::annotations_rule() {
  Annotations_ruleContext *_localctx = _tracker.createInstance<Annotations_ruleContext>(_ctx, getState());
  enterRule(_localctx, 130, ASPCore2Parser::RuleAnnotations_rule);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(635);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(631);
      annotation_rule();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(632);
      annotation_rule();
      setState(633);
      annotations_rule();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_ruleContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_ruleContext::Annotation_ruleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Annotation_rule_orderingContext* ASPCore2Parser::Annotation_ruleContext::annotation_rule_ordering() {
  return getRuleContext<ASPCore2Parser::Annotation_rule_orderingContext>(0);
}

ASPCore2Parser::Annotation_rule_atom_indexedContext* ASPCore2Parser::Annotation_ruleContext::annotation_rule_atom_indexed() {
  return getRuleContext<ASPCore2Parser::Annotation_rule_atom_indexedContext>(0);
}

ASPCore2Parser::Annotation_rule_partial_orderContext* ASPCore2Parser::Annotation_ruleContext::annotation_rule_partial_order() {
  return getRuleContext<ASPCore2Parser::Annotation_rule_partial_orderContext>(0);
}

ASPCore2Parser::Annotation_rule_projectionContext* ASPCore2Parser::Annotation_ruleContext::annotation_rule_projection() {
  return getRuleContext<ASPCore2Parser::Annotation_rule_projectionContext>(0);
}

ASPCore2Parser::Annotation_rule_rewriting_arithContext* ASPCore2Parser::Annotation_ruleContext::annotation_rule_rewriting_arith() {
  return getRuleContext<ASPCore2Parser::Annotation_rule_rewriting_arithContext>(0);
}

ASPCore2Parser::Annotation_rule_align_substitutionsContext* ASPCore2Parser::Annotation_ruleContext::annotation_rule_align_substitutions() {
  return getRuleContext<ASPCore2Parser::Annotation_rule_align_substitutionsContext>(0);
}

ASPCore2Parser::Annotation_rule_look_aheadContext* ASPCore2Parser::Annotation_ruleContext::annotation_rule_look_ahead() {
  return getRuleContext<ASPCore2Parser::Annotation_rule_look_aheadContext>(0);
}

ASPCore2Parser::Annotation_rule_to_decomposeContext* ASPCore2Parser::Annotation_ruleContext::annotation_rule_to_decompose() {
  return getRuleContext<ASPCore2Parser::Annotation_rule_to_decomposeContext>(0);
}

ASPCore2Parser::Annotation_rule_to_not_decomposeContext* ASPCore2Parser::Annotation_ruleContext::annotation_rule_to_not_decompose() {
  return getRuleContext<ASPCore2Parser::Annotation_rule_to_not_decomposeContext>(0);
}


size_t ASPCore2Parser::Annotation_ruleContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_rule;
}

void ASPCore2Parser::Annotation_ruleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_rule(this);
}

void ASPCore2Parser::Annotation_ruleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_rule(this);
}

ASPCore2Parser::Annotation_ruleContext* ASPCore2Parser::annotation_rule() {
  Annotation_ruleContext *_localctx = _tracker.createInstance<Annotation_ruleContext>(_ctx, getState());
  enterRule(_localctx, 132, ASPCore2Parser::RuleAnnotation_rule);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(646);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ASPCore2Parser::ANNOTATION_RULE_ORDERING: {
        enterOuterAlt(_localctx, 1);
        setState(637);
        annotation_rule_ordering();
        break;
      }

      case ASPCore2Parser::ANNOTATION_RULE_ATOM_INDEXED: {
        enterOuterAlt(_localctx, 2);
        setState(638);
        annotation_rule_atom_indexed();
        break;
      }

      case ASPCore2Parser::ANNOTATION_RULE_PARTIAL_ORDER: {
        enterOuterAlt(_localctx, 3);
        setState(639);
        annotation_rule_partial_order();
        break;
      }

      case ASPCore2Parser::ANNOTATION_RULE_PROJECTION: {
        enterOuterAlt(_localctx, 4);
        setState(640);
        annotation_rule_projection();
        break;
      }

      case ASPCore2Parser::ANNOTATION_RULE_REWRITING_ARITH: {
        enterOuterAlt(_localctx, 5);
        setState(641);
        annotation_rule_rewriting_arith();
        break;
      }

      case ASPCore2Parser::ANNOTATION_RULE_ALIGN_SUBSTITUTIONS: {
        enterOuterAlt(_localctx, 6);
        setState(642);
        annotation_rule_align_substitutions();
        break;
      }

      case ASPCore2Parser::ANNOTATION_RULE_LOOK_AHEAD: {
        enterOuterAlt(_localctx, 7);
        setState(643);
        annotation_rule_look_ahead();
        break;
      }

      case ASPCore2Parser::ANNOTATION_RULE_TO_DECOMPOSE: {
        enterOuterAlt(_localctx, 8);
        setState(644);
        annotation_rule_to_decompose();
        break;
      }

      case ASPCore2Parser::ANNOTATION_RULE_TO_NOT_DECOMPOSE: {
        enterOuterAlt(_localctx, 9);
        setState(645);
        annotation_rule_to_not_decompose();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_rule_to_decomposeContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_rule_to_decomposeContext::Annotation_rule_to_decomposeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_to_decomposeContext::ANNOTATION_RULE_TO_DECOMPOSE() {
  return getToken(ASPCore2Parser::ANNOTATION_RULE_TO_DECOMPOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_to_decomposeContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_to_decomposeContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_to_decomposeContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_rule_to_decomposeContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_rule_to_decompose;
}

void ASPCore2Parser::Annotation_rule_to_decomposeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_rule_to_decompose(this);
}

void ASPCore2Parser::Annotation_rule_to_decomposeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_rule_to_decompose(this);
}

ASPCore2Parser::Annotation_rule_to_decomposeContext* ASPCore2Parser::annotation_rule_to_decompose() {
  Annotation_rule_to_decomposeContext *_localctx = _tracker.createInstance<Annotation_rule_to_decomposeContext>(_ctx, getState());
  enterRule(_localctx, 134, ASPCore2Parser::RuleAnnotation_rule_to_decompose);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(654);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(648);
      match(ASPCore2Parser::ANNOTATION_RULE_TO_DECOMPOSE);
      setState(649);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(650);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(651);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(652);
      match(ASPCore2Parser::ANNOTATION_RULE_TO_DECOMPOSE);
      setState(653);
      match(ASPCore2Parser::DOT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_rule_to_not_decomposeContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_rule_to_not_decomposeContext::Annotation_rule_to_not_decomposeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_to_not_decomposeContext::ANNOTATION_RULE_TO_NOT_DECOMPOSE() {
  return getToken(ASPCore2Parser::ANNOTATION_RULE_TO_NOT_DECOMPOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_to_not_decomposeContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_to_not_decomposeContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_to_not_decomposeContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_rule_to_not_decomposeContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_rule_to_not_decompose;
}

void ASPCore2Parser::Annotation_rule_to_not_decomposeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_rule_to_not_decompose(this);
}

void ASPCore2Parser::Annotation_rule_to_not_decomposeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_rule_to_not_decompose(this);
}

ASPCore2Parser::Annotation_rule_to_not_decomposeContext* ASPCore2Parser::annotation_rule_to_not_decompose() {
  Annotation_rule_to_not_decomposeContext *_localctx = _tracker.createInstance<Annotation_rule_to_not_decomposeContext>(_ctx, getState());
  enterRule(_localctx, 136, ASPCore2Parser::RuleAnnotation_rule_to_not_decompose);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(662);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 40, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(656);
      match(ASPCore2Parser::ANNOTATION_RULE_TO_NOT_DECOMPOSE);
      setState(657);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(658);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(659);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(660);
      match(ASPCore2Parser::ANNOTATION_RULE_TO_NOT_DECOMPOSE);
      setState(661);
      match(ASPCore2Parser::DOT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_rule_orderingContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_rule_orderingContext::Annotation_rule_orderingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_orderingContext::ANNOTATION_RULE_ORDERING() {
  return getToken(ASPCore2Parser::ANNOTATION_RULE_ORDERING, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_orderingContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_orderingContext::ANNOTATION_ORDERING_VALUE() {
  return getToken(ASPCore2Parser::ANNOTATION_ORDERING_VALUE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_orderingContext::EQUAL() {
  return getToken(ASPCore2Parser::EQUAL, 0);
}

ASPCore2Parser::Rule_ordering_typeContext* ASPCore2Parser::Annotation_rule_orderingContext::rule_ordering_type() {
  return getRuleContext<ASPCore2Parser::Rule_ordering_typeContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_orderingContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_orderingContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_rule_orderingContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_rule_ordering;
}

void ASPCore2Parser::Annotation_rule_orderingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_rule_ordering(this);
}

void ASPCore2Parser::Annotation_rule_orderingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_rule_ordering(this);
}

ASPCore2Parser::Annotation_rule_orderingContext* ASPCore2Parser::annotation_rule_ordering() {
  Annotation_rule_orderingContext *_localctx = _tracker.createInstance<Annotation_rule_orderingContext>(_ctx, getState());
  enterRule(_localctx, 138, ASPCore2Parser::RuleAnnotation_rule_ordering);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(678);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(664);
      match(ASPCore2Parser::ANNOTATION_RULE_ORDERING);
      setState(665);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(666);
      match(ASPCore2Parser::ANNOTATION_ORDERING_VALUE);
      setState(667);
      match(ASPCore2Parser::EQUAL);
      setState(668);
      rule_ordering_type();
      setState(669);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(670);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(672);
      match(ASPCore2Parser::ANNOTATION_RULE_ORDERING);
      setState(673);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(674);
      rule_ordering_type();
      setState(675);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(676);
      match(ASPCore2Parser::DOT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_global_orderingContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_global_orderingContext::Annotation_global_orderingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_orderingContext::ANNOTATION_GLOBAL_ORDERING() {
  return getToken(ASPCore2Parser::ANNOTATION_GLOBAL_ORDERING, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_orderingContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_orderingContext::ANNOTATION_ORDERING_VALUE() {
  return getToken(ASPCore2Parser::ANNOTATION_ORDERING_VALUE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_orderingContext::EQUAL() {
  return getToken(ASPCore2Parser::EQUAL, 0);
}

ASPCore2Parser::Global_ordering_typeContext* ASPCore2Parser::Annotation_global_orderingContext::global_ordering_type() {
  return getRuleContext<ASPCore2Parser::Global_ordering_typeContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_orderingContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_orderingContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_global_orderingContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_global_ordering;
}

void ASPCore2Parser::Annotation_global_orderingContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_global_ordering(this);
}

void ASPCore2Parser::Annotation_global_orderingContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_global_ordering(this);
}

ASPCore2Parser::Annotation_global_orderingContext* ASPCore2Parser::annotation_global_ordering() {
  Annotation_global_orderingContext *_localctx = _tracker.createInstance<Annotation_global_orderingContext>(_ctx, getState());
  enterRule(_localctx, 140, ASPCore2Parser::RuleAnnotation_global_ordering);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(694);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(680);
      match(ASPCore2Parser::ANNOTATION_GLOBAL_ORDERING);
      setState(681);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(682);
      match(ASPCore2Parser::ANNOTATION_ORDERING_VALUE);
      setState(683);
      match(ASPCore2Parser::EQUAL);
      setState(684);
      global_ordering_type();
      setState(685);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(686);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(688);
      match(ASPCore2Parser::ANNOTATION_GLOBAL_ORDERING);
      setState(689);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(690);
      global_ordering_type();
      setState(691);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(692);
      match(ASPCore2Parser::DOT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_global_extatom_conversionContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_global_extatom_conversionContext::Annotation_global_extatom_conversionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_extatom_conversionContext::ANNOTATION_GLOBAL_EXTATOM_CONVERSION() {
  return getToken(ASPCore2Parser::ANNOTATION_GLOBAL_EXTATOM_CONVERSION, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_extatom_conversionContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_extatom_conversionContext::ANNOTATION_EXTATOM_PREDICATE() {
  return getToken(ASPCore2Parser::ANNOTATION_EXTATOM_PREDICATE, 0);
}

std::vector<tree::TerminalNode *> ASPCore2Parser::Annotation_global_extatom_conversionContext::EQUAL() {
  return getTokens(ASPCore2Parser::EQUAL);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_extatom_conversionContext::EQUAL(size_t i) {
  return getToken(ASPCore2Parser::EQUAL, i);
}

ASPCore2Parser::Annotation_extpredicateContext* ASPCore2Parser::Annotation_global_extatom_conversionContext::annotation_extpredicate() {
  return getRuleContext<ASPCore2Parser::Annotation_extpredicateContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_extatom_conversionContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_extatom_conversionContext::ANNOTATION_EXTATOM_TYPE() {
  return getToken(ASPCore2Parser::ANNOTATION_EXTATOM_TYPE, 0);
}

ASPCore2Parser::Extatom_conv_typesContext* ASPCore2Parser::Annotation_global_extatom_conversionContext::extatom_conv_types() {
  return getRuleContext<ASPCore2Parser::Extatom_conv_typesContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_extatom_conversionContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_extatom_conversionContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_global_extatom_conversionContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_global_extatom_conversion;
}

void ASPCore2Parser::Annotation_global_extatom_conversionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_global_extatom_conversion(this);
}

void ASPCore2Parser::Annotation_global_extatom_conversionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_global_extatom_conversion(this);
}

ASPCore2Parser::Annotation_global_extatom_conversionContext* ASPCore2Parser::annotation_global_extatom_conversion() {
  Annotation_global_extatom_conversionContext *_localctx = _tracker.createInstance<Annotation_global_extatom_conversionContext>(_ctx, getState());
  enterRule(_localctx, 142, ASPCore2Parser::RuleAnnotation_global_extatom_conversion);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(696);
    match(ASPCore2Parser::ANNOTATION_GLOBAL_EXTATOM_CONVERSION);
    setState(697);
    match(ASPCore2Parser::PARAM_OPEN);
    setState(698);
    match(ASPCore2Parser::ANNOTATION_EXTATOM_PREDICATE);
    setState(699);
    match(ASPCore2Parser::EQUAL);
    setState(700);
    annotation_extpredicate();
    setState(701);
    match(ASPCore2Parser::COMMA);
    setState(702);
    match(ASPCore2Parser::ANNOTATION_EXTATOM_TYPE);
    setState(703);
    match(ASPCore2Parser::EQUAL);
    setState(704);
    extatom_conv_types();
    setState(705);
    match(ASPCore2Parser::PARAM_CLOSE);
    setState(706);
    match(ASPCore2Parser::DOT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_extpredicateContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_extpredicateContext::Annotation_extpredicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_extpredicateContext::AMPERSAND() {
  return getToken(ASPCore2Parser::AMPERSAND, 0);
}

ASPCore2Parser::IdentifierContext* ASPCore2Parser::Annotation_extpredicateContext::identifier() {
  return getRuleContext<ASPCore2Parser::IdentifierContext>(0);
}


size_t ASPCore2Parser::Annotation_extpredicateContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_extpredicate;
}

void ASPCore2Parser::Annotation_extpredicateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_extpredicate(this);
}

void ASPCore2Parser::Annotation_extpredicateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_extpredicate(this);
}

ASPCore2Parser::Annotation_extpredicateContext* ASPCore2Parser::annotation_extpredicate() {
  Annotation_extpredicateContext *_localctx = _tracker.createInstance<Annotation_extpredicateContext>(_ctx, getState());
  enterRule(_localctx, 144, ASPCore2Parser::RuleAnnotation_extpredicate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(708);
    match(ASPCore2Parser::AMPERSAND);
    setState(709);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Extatom_conv_typesContext ------------------------------------------------------------------

ASPCore2Parser::Extatom_conv_typesContext::Extatom_conv_typesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Extatom_conv_typeContext* ASPCore2Parser::Extatom_conv_typesContext::extatom_conv_type() {
  return getRuleContext<ASPCore2Parser::Extatom_conv_typeContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Extatom_conv_typesContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

ASPCore2Parser::Extatom_conv_typesContext* ASPCore2Parser::Extatom_conv_typesContext::extatom_conv_types() {
  return getRuleContext<ASPCore2Parser::Extatom_conv_typesContext>(0);
}


size_t ASPCore2Parser::Extatom_conv_typesContext::getRuleIndex() const {
  return ASPCore2Parser::RuleExtatom_conv_types;
}

void ASPCore2Parser::Extatom_conv_typesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtatom_conv_types(this);
}

void ASPCore2Parser::Extatom_conv_typesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtatom_conv_types(this);
}

ASPCore2Parser::Extatom_conv_typesContext* ASPCore2Parser::extatom_conv_types() {
  Extatom_conv_typesContext *_localctx = _tracker.createInstance<Extatom_conv_typesContext>(_ctx, getState());
  enterRule(_localctx, 146, ASPCore2Parser::RuleExtatom_conv_types);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(716);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(711);
      extatom_conv_type();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(712);
      extatom_conv_type();
      setState(713);
      match(ASPCore2Parser::COMMA);
      setState(714);
      extatom_conv_types();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Extatom_conv_typeContext ------------------------------------------------------------------

ASPCore2Parser::Extatom_conv_typeContext::Extatom_conv_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Extatom_conv_typeContext::ANNOTATION_EXTATOM_TYPE_QCONST() {
  return getToken(ASPCore2Parser::ANNOTATION_EXTATOM_TYPE_QCONST, 0);
}

tree::TerminalNode* ASPCore2Parser::Extatom_conv_typeContext::ANNOTATION_EXTATOM_TYPE_CONST() {
  return getToken(ASPCore2Parser::ANNOTATION_EXTATOM_TYPE_CONST, 0);
}

tree::TerminalNode* ASPCore2Parser::Extatom_conv_typeContext::ANNOTATION_EXTATOM_TYPE_U_INT() {
  return getToken(ASPCore2Parser::ANNOTATION_EXTATOM_TYPE_U_INT, 0);
}

tree::TerminalNode* ASPCore2Parser::Extatom_conv_typeContext::ANNOTATION_EXTATOM_TYPE_UT_INT() {
  return getToken(ASPCore2Parser::ANNOTATION_EXTATOM_TYPE_UT_INT, 0);
}

tree::TerminalNode* ASPCore2Parser::Extatom_conv_typeContext::ANNOTATION_EXTATOM_TYPE_UR_INT() {
  return getToken(ASPCore2Parser::ANNOTATION_EXTATOM_TYPE_UR_INT, 0);
}

tree::TerminalNode* ASPCore2Parser::Extatom_conv_typeContext::ANNOTATION_EXTATOM_TYPE_T_INT() {
  return getToken(ASPCore2Parser::ANNOTATION_EXTATOM_TYPE_T_INT, 0);
}

tree::TerminalNode* ASPCore2Parser::Extatom_conv_typeContext::ANNOTATION_EXTATOM_TYPE_R_INT() {
  return getToken(ASPCore2Parser::ANNOTATION_EXTATOM_TYPE_R_INT, 0);
}


size_t ASPCore2Parser::Extatom_conv_typeContext::getRuleIndex() const {
  return ASPCore2Parser::RuleExtatom_conv_type;
}

void ASPCore2Parser::Extatom_conv_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtatom_conv_type(this);
}

void ASPCore2Parser::Extatom_conv_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtatom_conv_type(this);
}

ASPCore2Parser::Extatom_conv_typeContext* ASPCore2Parser::extatom_conv_type() {
  Extatom_conv_typeContext *_localctx = _tracker.createInstance<Extatom_conv_typeContext>(_ctx, getState());
  enterRule(_localctx, 148, ASPCore2Parser::RuleExtatom_conv_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(718);
    _la = _input->LA(1);
    if (!(((((_la - 59) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 59)) & ((1ULL << (ASPCore2Parser::ANNOTATION_EXTATOM_TYPE_QCONST - 59))
      | (1ULL << (ASPCore2Parser::ANNOTATION_EXTATOM_TYPE_CONST - 59))
      | (1ULL << (ASPCore2Parser::ANNOTATION_EXTATOM_TYPE_U_INT - 59))
      | (1ULL << (ASPCore2Parser::ANNOTATION_EXTATOM_TYPE_UR_INT - 59))
      | (1ULL << (ASPCore2Parser::ANNOTATION_EXTATOM_TYPE_UT_INT - 59))
      | (1ULL << (ASPCore2Parser::ANNOTATION_EXTATOM_TYPE_R_INT - 59))
      | (1ULL << (ASPCore2Parser::ANNOTATION_EXTATOM_TYPE_T_INT - 59)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rule_ordering_typeContext ------------------------------------------------------------------

ASPCore2Parser::Rule_ordering_typeContext::Rule_ordering_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Rule_ordering_typeContext::NUMBER() {
  return getToken(ASPCore2Parser::NUMBER, 0);
}


size_t ASPCore2Parser::Rule_ordering_typeContext::getRuleIndex() const {
  return ASPCore2Parser::RuleRule_ordering_type;
}

void ASPCore2Parser::Rule_ordering_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRule_ordering_type(this);
}

void ASPCore2Parser::Rule_ordering_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRule_ordering_type(this);
}

ASPCore2Parser::Rule_ordering_typeContext* ASPCore2Parser::rule_ordering_type() {
  Rule_ordering_typeContext *_localctx = _tracker.createInstance<Rule_ordering_typeContext>(_ctx, getState());
  enterRule(_localctx, 150, ASPCore2Parser::RuleRule_ordering_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(720);
    match(ASPCore2Parser::NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Global_ordering_typeContext ------------------------------------------------------------------

ASPCore2Parser::Global_ordering_typeContext::Global_ordering_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Global_ordering_typeContext::NUMBER() {
  return getToken(ASPCore2Parser::NUMBER, 0);
}


size_t ASPCore2Parser::Global_ordering_typeContext::getRuleIndex() const {
  return ASPCore2Parser::RuleGlobal_ordering_type;
}

void ASPCore2Parser::Global_ordering_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGlobal_ordering_type(this);
}

void ASPCore2Parser::Global_ordering_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGlobal_ordering_type(this);
}

ASPCore2Parser::Global_ordering_typeContext* ASPCore2Parser::global_ordering_type() {
  Global_ordering_typeContext *_localctx = _tracker.createInstance<Global_ordering_typeContext>(_ctx, getState());
  enterRule(_localctx, 152, ASPCore2Parser::RuleGlobal_ordering_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(722);
    match(ASPCore2Parser::NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_rule_atom_indexedContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_rule_atom_indexedContext::Annotation_rule_atom_indexedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_atom_indexedContext::ANNOTATION_RULE_ATOM_INDEXED() {
  return getToken(ASPCore2Parser::ANNOTATION_RULE_ATOM_INDEXED, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_atom_indexedContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_atom_indexedContext::ANNOTATION_ATOM_INDEXED_ATOM() {
  return getToken(ASPCore2Parser::ANNOTATION_ATOM_INDEXED_ATOM, 0);
}

std::vector<tree::TerminalNode *> ASPCore2Parser::Annotation_rule_atom_indexedContext::EQUAL() {
  return getTokens(ASPCore2Parser::EQUAL);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_atom_indexedContext::EQUAL(size_t i) {
  return getToken(ASPCore2Parser::EQUAL, i);
}

ASPCore2Parser::Rule_naf_literal_annotationContext* ASPCore2Parser::Annotation_rule_atom_indexedContext::rule_naf_literal_annotation() {
  return getRuleContext<ASPCore2Parser::Rule_naf_literal_annotationContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_atom_indexedContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_atom_indexedContext::ANNOTATION_ATOM_INDEXED_ARGUMENTS() {
  return getToken(ASPCore2Parser::ANNOTATION_ATOM_INDEXED_ARGUMENTS, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_atom_indexedContext::CURLY_OPEN() {
  return getToken(ASPCore2Parser::CURLY_OPEN, 0);
}

ASPCore2Parser::Rule_indexing_argumentsContext* ASPCore2Parser::Annotation_rule_atom_indexedContext::rule_indexing_arguments() {
  return getRuleContext<ASPCore2Parser::Rule_indexing_argumentsContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_atom_indexedContext::CURLY_CLOSE() {
  return getToken(ASPCore2Parser::CURLY_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_atom_indexedContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_atom_indexedContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_rule_atom_indexedContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_rule_atom_indexed;
}

void ASPCore2Parser::Annotation_rule_atom_indexedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_rule_atom_indexed(this);
}

void ASPCore2Parser::Annotation_rule_atom_indexedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_rule_atom_indexed(this);
}

ASPCore2Parser::Annotation_rule_atom_indexedContext* ASPCore2Parser::annotation_rule_atom_indexed() {
  Annotation_rule_atom_indexedContext *_localctx = _tracker.createInstance<Annotation_rule_atom_indexedContext>(_ctx, getState());
  enterRule(_localctx, 154, ASPCore2Parser::RuleAnnotation_rule_atom_indexed);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(724);
    match(ASPCore2Parser::ANNOTATION_RULE_ATOM_INDEXED);
    setState(725);
    match(ASPCore2Parser::PARAM_OPEN);
    setState(726);
    match(ASPCore2Parser::ANNOTATION_ATOM_INDEXED_ATOM);
    setState(727);
    match(ASPCore2Parser::EQUAL);
    setState(728);
    rule_naf_literal_annotation();
    setState(729);
    match(ASPCore2Parser::COMMA);
    setState(730);
    match(ASPCore2Parser::ANNOTATION_ATOM_INDEXED_ARGUMENTS);
    setState(731);
    match(ASPCore2Parser::EQUAL);
    setState(732);
    match(ASPCore2Parser::CURLY_OPEN);
    setState(733);
    rule_indexing_arguments();
    setState(734);
    match(ASPCore2Parser::CURLY_CLOSE);
    setState(735);
    match(ASPCore2Parser::PARAM_CLOSE);
    setState(736);
    match(ASPCore2Parser::DOT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_global_atom_indexedContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_global_atom_indexedContext::Annotation_global_atom_indexedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_atom_indexedContext::ANNOTATION_GLOBAL_ATOM_INDEXED() {
  return getToken(ASPCore2Parser::ANNOTATION_GLOBAL_ATOM_INDEXED, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_atom_indexedContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_atom_indexedContext::ANNOTATION_ATOM_INDEXED_ATOM() {
  return getToken(ASPCore2Parser::ANNOTATION_ATOM_INDEXED_ATOM, 0);
}

std::vector<tree::TerminalNode *> ASPCore2Parser::Annotation_global_atom_indexedContext::EQUAL() {
  return getTokens(ASPCore2Parser::EQUAL);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_atom_indexedContext::EQUAL(size_t i) {
  return getToken(ASPCore2Parser::EQUAL, i);
}

ASPCore2Parser::Global_naf_literal_annotationContext* ASPCore2Parser::Annotation_global_atom_indexedContext::global_naf_literal_annotation() {
  return getRuleContext<ASPCore2Parser::Global_naf_literal_annotationContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_atom_indexedContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_atom_indexedContext::ANNOTATION_ATOM_INDEXED_ARGUMENTS() {
  return getToken(ASPCore2Parser::ANNOTATION_ATOM_INDEXED_ARGUMENTS, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_atom_indexedContext::CURLY_OPEN() {
  return getToken(ASPCore2Parser::CURLY_OPEN, 0);
}

ASPCore2Parser::Global_indexing_argumentsContext* ASPCore2Parser::Annotation_global_atom_indexedContext::global_indexing_arguments() {
  return getRuleContext<ASPCore2Parser::Global_indexing_argumentsContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_atom_indexedContext::CURLY_CLOSE() {
  return getToken(ASPCore2Parser::CURLY_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_atom_indexedContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_atom_indexedContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_global_atom_indexedContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_global_atom_indexed;
}

void ASPCore2Parser::Annotation_global_atom_indexedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_global_atom_indexed(this);
}

void ASPCore2Parser::Annotation_global_atom_indexedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_global_atom_indexed(this);
}

ASPCore2Parser::Annotation_global_atom_indexedContext* ASPCore2Parser::annotation_global_atom_indexed() {
  Annotation_global_atom_indexedContext *_localctx = _tracker.createInstance<Annotation_global_atom_indexedContext>(_ctx, getState());
  enterRule(_localctx, 156, ASPCore2Parser::RuleAnnotation_global_atom_indexed);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(738);
    match(ASPCore2Parser::ANNOTATION_GLOBAL_ATOM_INDEXED);
    setState(739);
    match(ASPCore2Parser::PARAM_OPEN);
    setState(740);
    match(ASPCore2Parser::ANNOTATION_ATOM_INDEXED_ATOM);
    setState(741);
    match(ASPCore2Parser::EQUAL);
    setState(742);
    global_naf_literal_annotation();
    setState(743);
    match(ASPCore2Parser::COMMA);
    setState(744);
    match(ASPCore2Parser::ANNOTATION_ATOM_INDEXED_ARGUMENTS);
    setState(745);
    match(ASPCore2Parser::EQUAL);
    setState(746);
    match(ASPCore2Parser::CURLY_OPEN);
    setState(747);
    global_indexing_arguments();
    setState(748);
    match(ASPCore2Parser::CURLY_CLOSE);
    setState(749);
    match(ASPCore2Parser::PARAM_CLOSE);
    setState(750);
    match(ASPCore2Parser::DOT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rule_indexing_argumentsContext ------------------------------------------------------------------

ASPCore2Parser::Rule_indexing_argumentsContext::Rule_indexing_argumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Rule_indexing_argumentsContext::NUMBER() {
  return getToken(ASPCore2Parser::NUMBER, 0);
}

tree::TerminalNode* ASPCore2Parser::Rule_indexing_argumentsContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

ASPCore2Parser::Rule_indexing_argumentsContext* ASPCore2Parser::Rule_indexing_argumentsContext::rule_indexing_arguments() {
  return getRuleContext<ASPCore2Parser::Rule_indexing_argumentsContext>(0);
}


size_t ASPCore2Parser::Rule_indexing_argumentsContext::getRuleIndex() const {
  return ASPCore2Parser::RuleRule_indexing_arguments;
}

void ASPCore2Parser::Rule_indexing_argumentsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRule_indexing_arguments(this);
}

void ASPCore2Parser::Rule_indexing_argumentsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRule_indexing_arguments(this);
}

ASPCore2Parser::Rule_indexing_argumentsContext* ASPCore2Parser::rule_indexing_arguments() {
  Rule_indexing_argumentsContext *_localctx = _tracker.createInstance<Rule_indexing_argumentsContext>(_ctx, getState());
  enterRule(_localctx, 158, ASPCore2Parser::RuleRule_indexing_arguments);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(756);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(752);
      match(ASPCore2Parser::NUMBER);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(753);
      match(ASPCore2Parser::NUMBER);
      setState(754);
      match(ASPCore2Parser::COMMA);
      setState(755);
      rule_indexing_arguments();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rule_naf_literal_annotationContext ------------------------------------------------------------------

ASPCore2Parser::Rule_naf_literal_annotationContext::Rule_naf_literal_annotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Classic_literalContext* ASPCore2Parser::Rule_naf_literal_annotationContext::classic_literal() {
  return getRuleContext<ASPCore2Parser::Classic_literalContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Rule_naf_literal_annotationContext::NAF() {
  return getToken(ASPCore2Parser::NAF, 0);
}


size_t ASPCore2Parser::Rule_naf_literal_annotationContext::getRuleIndex() const {
  return ASPCore2Parser::RuleRule_naf_literal_annotation;
}

void ASPCore2Parser::Rule_naf_literal_annotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRule_naf_literal_annotation(this);
}

void ASPCore2Parser::Rule_naf_literal_annotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRule_naf_literal_annotation(this);
}

ASPCore2Parser::Rule_naf_literal_annotationContext* ASPCore2Parser::rule_naf_literal_annotation() {
  Rule_naf_literal_annotationContext *_localctx = _tracker.createInstance<Rule_naf_literal_annotationContext>(_ctx, getState());
  enterRule(_localctx, 160, ASPCore2Parser::RuleRule_naf_literal_annotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(761);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ASPCore2Parser::SYMBOLIC_CONSTANT:
      case ASPCore2Parser::VARIABLE:
      case ASPCore2Parser::STRING:
      case ASPCore2Parser::DASH: {
        enterOuterAlt(_localctx, 1);
        setState(758);
        classic_literal();
        break;
      }

      case ASPCore2Parser::NAF: {
        enterOuterAlt(_localctx, 2);
        setState(759);
        match(ASPCore2Parser::NAF);
        setState(760);
        classic_literal();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Global_indexing_argumentsContext ------------------------------------------------------------------

ASPCore2Parser::Global_indexing_argumentsContext::Global_indexing_argumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Global_indexing_argumentsContext::NUMBER() {
  return getToken(ASPCore2Parser::NUMBER, 0);
}

tree::TerminalNode* ASPCore2Parser::Global_indexing_argumentsContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

ASPCore2Parser::Global_indexing_argumentsContext* ASPCore2Parser::Global_indexing_argumentsContext::global_indexing_arguments() {
  return getRuleContext<ASPCore2Parser::Global_indexing_argumentsContext>(0);
}


size_t ASPCore2Parser::Global_indexing_argumentsContext::getRuleIndex() const {
  return ASPCore2Parser::RuleGlobal_indexing_arguments;
}

void ASPCore2Parser::Global_indexing_argumentsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGlobal_indexing_arguments(this);
}

void ASPCore2Parser::Global_indexing_argumentsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGlobal_indexing_arguments(this);
}

ASPCore2Parser::Global_indexing_argumentsContext* ASPCore2Parser::global_indexing_arguments() {
  Global_indexing_argumentsContext *_localctx = _tracker.createInstance<Global_indexing_argumentsContext>(_ctx, getState());
  enterRule(_localctx, 162, ASPCore2Parser::RuleGlobal_indexing_arguments);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(767);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(763);
      match(ASPCore2Parser::NUMBER);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(764);
      match(ASPCore2Parser::NUMBER);
      setState(765);
      match(ASPCore2Parser::COMMA);
      setState(766);
      global_indexing_arguments();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Global_naf_literal_annotationContext ------------------------------------------------------------------

ASPCore2Parser::Global_naf_literal_annotationContext::Global_naf_literal_annotationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Classic_literalContext* ASPCore2Parser::Global_naf_literal_annotationContext::classic_literal() {
  return getRuleContext<ASPCore2Parser::Classic_literalContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Global_naf_literal_annotationContext::NAF() {
  return getToken(ASPCore2Parser::NAF, 0);
}


size_t ASPCore2Parser::Global_naf_literal_annotationContext::getRuleIndex() const {
  return ASPCore2Parser::RuleGlobal_naf_literal_annotation;
}

void ASPCore2Parser::Global_naf_literal_annotationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGlobal_naf_literal_annotation(this);
}

void ASPCore2Parser::Global_naf_literal_annotationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGlobal_naf_literal_annotation(this);
}

ASPCore2Parser::Global_naf_literal_annotationContext* ASPCore2Parser::global_naf_literal_annotation() {
  Global_naf_literal_annotationContext *_localctx = _tracker.createInstance<Global_naf_literal_annotationContext>(_ctx, getState());
  enterRule(_localctx, 164, ASPCore2Parser::RuleGlobal_naf_literal_annotation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(772);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ASPCore2Parser::SYMBOLIC_CONSTANT:
      case ASPCore2Parser::VARIABLE:
      case ASPCore2Parser::STRING:
      case ASPCore2Parser::DASH: {
        enterOuterAlt(_localctx, 1);
        setState(769);
        classic_literal();
        break;
      }

      case ASPCore2Parser::NAF: {
        enterOuterAlt(_localctx, 2);
        setState(770);
        match(ASPCore2Parser::NAF);
        setState(771);
        classic_literal();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rule_atom_annotation_beforeContext ------------------------------------------------------------------

ASPCore2Parser::Rule_atom_annotation_beforeContext::Rule_atom_annotation_beforeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Classic_literalContext* ASPCore2Parser::Rule_atom_annotation_beforeContext::classic_literal() {
  return getRuleContext<ASPCore2Parser::Classic_literalContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Rule_atom_annotation_beforeContext::NAF() {
  return getToken(ASPCore2Parser::NAF, 0);
}

ASPCore2Parser::Builtin_atomContext* ASPCore2Parser::Rule_atom_annotation_beforeContext::builtin_atom() {
  return getRuleContext<ASPCore2Parser::Builtin_atomContext>(0);
}

ASPCore2Parser::Aggregate_atomContext* ASPCore2Parser::Rule_atom_annotation_beforeContext::aggregate_atom() {
  return getRuleContext<ASPCore2Parser::Aggregate_atomContext>(0);
}

ASPCore2Parser::ExtAtomContext* ASPCore2Parser::Rule_atom_annotation_beforeContext::extAtom() {
  return getRuleContext<ASPCore2Parser::ExtAtomContext>(0);
}


size_t ASPCore2Parser::Rule_atom_annotation_beforeContext::getRuleIndex() const {
  return ASPCore2Parser::RuleRule_atom_annotation_before;
}

void ASPCore2Parser::Rule_atom_annotation_beforeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRule_atom_annotation_before(this);
}

void ASPCore2Parser::Rule_atom_annotation_beforeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRule_atom_annotation_before(this);
}

ASPCore2Parser::Rule_atom_annotation_beforeContext* ASPCore2Parser::rule_atom_annotation_before() {
  Rule_atom_annotation_beforeContext *_localctx = _tracker.createInstance<Rule_atom_annotation_beforeContext>(_ctx, getState());
  enterRule(_localctx, 166, ASPCore2Parser::RuleRule_atom_annotation_before);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(784);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(774);
      classic_literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(775);
      match(ASPCore2Parser::NAF);
      setState(776);
      classic_literal();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(777);
      builtin_atom();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(778);
      aggregate_atom();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(779);
      match(ASPCore2Parser::NAF);
      setState(780);
      aggregate_atom();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(781);
      extAtom();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(782);
      match(ASPCore2Parser::NAF);
      setState(783);
      extAtom();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Global_atom_annotation_beforeContext ------------------------------------------------------------------

ASPCore2Parser::Global_atom_annotation_beforeContext::Global_atom_annotation_beforeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Classic_literalContext* ASPCore2Parser::Global_atom_annotation_beforeContext::classic_literal() {
  return getRuleContext<ASPCore2Parser::Classic_literalContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Global_atom_annotation_beforeContext::NAF() {
  return getToken(ASPCore2Parser::NAF, 0);
}

ASPCore2Parser::Builtin_atomContext* ASPCore2Parser::Global_atom_annotation_beforeContext::builtin_atom() {
  return getRuleContext<ASPCore2Parser::Builtin_atomContext>(0);
}

ASPCore2Parser::Aggregate_atomContext* ASPCore2Parser::Global_atom_annotation_beforeContext::aggregate_atom() {
  return getRuleContext<ASPCore2Parser::Aggregate_atomContext>(0);
}

ASPCore2Parser::ExtAtomContext* ASPCore2Parser::Global_atom_annotation_beforeContext::extAtom() {
  return getRuleContext<ASPCore2Parser::ExtAtomContext>(0);
}


size_t ASPCore2Parser::Global_atom_annotation_beforeContext::getRuleIndex() const {
  return ASPCore2Parser::RuleGlobal_atom_annotation_before;
}

void ASPCore2Parser::Global_atom_annotation_beforeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGlobal_atom_annotation_before(this);
}

void ASPCore2Parser::Global_atom_annotation_beforeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGlobal_atom_annotation_before(this);
}

ASPCore2Parser::Global_atom_annotation_beforeContext* ASPCore2Parser::global_atom_annotation_before() {
  Global_atom_annotation_beforeContext *_localctx = _tracker.createInstance<Global_atom_annotation_beforeContext>(_ctx, getState());
  enterRule(_localctx, 168, ASPCore2Parser::RuleGlobal_atom_annotation_before);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(796);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(786);
      classic_literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(787);
      match(ASPCore2Parser::NAF);
      setState(788);
      classic_literal();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(789);
      builtin_atom();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(790);
      aggregate_atom();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(791);
      match(ASPCore2Parser::NAF);
      setState(792);
      aggregate_atom();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(793);
      extAtom();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(794);
      match(ASPCore2Parser::NAF);
      setState(795);
      extAtom();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rule_atom_annotation_afterContext ------------------------------------------------------------------

ASPCore2Parser::Rule_atom_annotation_afterContext::Rule_atom_annotation_afterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Classic_literalContext* ASPCore2Parser::Rule_atom_annotation_afterContext::classic_literal() {
  return getRuleContext<ASPCore2Parser::Classic_literalContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Rule_atom_annotation_afterContext::NAF() {
  return getToken(ASPCore2Parser::NAF, 0);
}

ASPCore2Parser::Builtin_atomContext* ASPCore2Parser::Rule_atom_annotation_afterContext::builtin_atom() {
  return getRuleContext<ASPCore2Parser::Builtin_atomContext>(0);
}

ASPCore2Parser::Aggregate_atomContext* ASPCore2Parser::Rule_atom_annotation_afterContext::aggregate_atom() {
  return getRuleContext<ASPCore2Parser::Aggregate_atomContext>(0);
}

ASPCore2Parser::ExtAtomContext* ASPCore2Parser::Rule_atom_annotation_afterContext::extAtom() {
  return getRuleContext<ASPCore2Parser::ExtAtomContext>(0);
}


size_t ASPCore2Parser::Rule_atom_annotation_afterContext::getRuleIndex() const {
  return ASPCore2Parser::RuleRule_atom_annotation_after;
}

void ASPCore2Parser::Rule_atom_annotation_afterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRule_atom_annotation_after(this);
}

void ASPCore2Parser::Rule_atom_annotation_afterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRule_atom_annotation_after(this);
}

ASPCore2Parser::Rule_atom_annotation_afterContext* ASPCore2Parser::rule_atom_annotation_after() {
  Rule_atom_annotation_afterContext *_localctx = _tracker.createInstance<Rule_atom_annotation_afterContext>(_ctx, getState());
  enterRule(_localctx, 170, ASPCore2Parser::RuleRule_atom_annotation_after);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(808);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(798);
      classic_literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(799);
      match(ASPCore2Parser::NAF);
      setState(800);
      classic_literal();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(801);
      builtin_atom();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(802);
      aggregate_atom();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(803);
      match(ASPCore2Parser::NAF);
      setState(804);
      aggregate_atom();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(805);
      extAtom();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(806);
      match(ASPCore2Parser::NAF);
      setState(807);
      extAtom();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Global_atom_annotation_afterContext ------------------------------------------------------------------

ASPCore2Parser::Global_atom_annotation_afterContext::Global_atom_annotation_afterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Classic_literalContext* ASPCore2Parser::Global_atom_annotation_afterContext::classic_literal() {
  return getRuleContext<ASPCore2Parser::Classic_literalContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Global_atom_annotation_afterContext::NAF() {
  return getToken(ASPCore2Parser::NAF, 0);
}

ASPCore2Parser::Builtin_atomContext* ASPCore2Parser::Global_atom_annotation_afterContext::builtin_atom() {
  return getRuleContext<ASPCore2Parser::Builtin_atomContext>(0);
}

ASPCore2Parser::Aggregate_atomContext* ASPCore2Parser::Global_atom_annotation_afterContext::aggregate_atom() {
  return getRuleContext<ASPCore2Parser::Aggregate_atomContext>(0);
}

ASPCore2Parser::ExtAtomContext* ASPCore2Parser::Global_atom_annotation_afterContext::extAtom() {
  return getRuleContext<ASPCore2Parser::ExtAtomContext>(0);
}


size_t ASPCore2Parser::Global_atom_annotation_afterContext::getRuleIndex() const {
  return ASPCore2Parser::RuleGlobal_atom_annotation_after;
}

void ASPCore2Parser::Global_atom_annotation_afterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGlobal_atom_annotation_after(this);
}

void ASPCore2Parser::Global_atom_annotation_afterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGlobal_atom_annotation_after(this);
}

ASPCore2Parser::Global_atom_annotation_afterContext* ASPCore2Parser::global_atom_annotation_after() {
  Global_atom_annotation_afterContext *_localctx = _tracker.createInstance<Global_atom_annotation_afterContext>(_ctx, getState());
  enterRule(_localctx, 172, ASPCore2Parser::RuleGlobal_atom_annotation_after);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(820);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(810);
      classic_literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(811);
      match(ASPCore2Parser::NAF);
      setState(812);
      classic_literal();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(813);
      builtin_atom();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(814);
      aggregate_atom();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(815);
      match(ASPCore2Parser::NAF);
      setState(816);
      aggregate_atom();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(817);
      extAtom();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(818);
      match(ASPCore2Parser::NAF);
      setState(819);
      extAtom();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rule_atoms_annotation_beforeContext ------------------------------------------------------------------

ASPCore2Parser::Rule_atoms_annotation_beforeContext::Rule_atoms_annotation_beforeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Rule_atom_annotation_beforeContext* ASPCore2Parser::Rule_atoms_annotation_beforeContext::rule_atom_annotation_before() {
  return getRuleContext<ASPCore2Parser::Rule_atom_annotation_beforeContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Rule_atoms_annotation_beforeContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

ASPCore2Parser::Rule_atoms_annotation_beforeContext* ASPCore2Parser::Rule_atoms_annotation_beforeContext::rule_atoms_annotation_before() {
  return getRuleContext<ASPCore2Parser::Rule_atoms_annotation_beforeContext>(0);
}


size_t ASPCore2Parser::Rule_atoms_annotation_beforeContext::getRuleIndex() const {
  return ASPCore2Parser::RuleRule_atoms_annotation_before;
}

void ASPCore2Parser::Rule_atoms_annotation_beforeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRule_atoms_annotation_before(this);
}

void ASPCore2Parser::Rule_atoms_annotation_beforeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRule_atoms_annotation_before(this);
}

ASPCore2Parser::Rule_atoms_annotation_beforeContext* ASPCore2Parser::rule_atoms_annotation_before() {
  Rule_atoms_annotation_beforeContext *_localctx = _tracker.createInstance<Rule_atoms_annotation_beforeContext>(_ctx, getState());
  enterRule(_localctx, 174, ASPCore2Parser::RuleRule_atoms_annotation_before);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(827);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(822);
      rule_atom_annotation_before();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(823);
      rule_atom_annotation_before();
      setState(824);
      match(ASPCore2Parser::COMMA);
      setState(825);
      rule_atoms_annotation_before();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Global_atoms_annotation_beforeContext ------------------------------------------------------------------

ASPCore2Parser::Global_atoms_annotation_beforeContext::Global_atoms_annotation_beforeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Global_atom_annotation_beforeContext* ASPCore2Parser::Global_atoms_annotation_beforeContext::global_atom_annotation_before() {
  return getRuleContext<ASPCore2Parser::Global_atom_annotation_beforeContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Global_atoms_annotation_beforeContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

ASPCore2Parser::Global_atoms_annotation_beforeContext* ASPCore2Parser::Global_atoms_annotation_beforeContext::global_atoms_annotation_before() {
  return getRuleContext<ASPCore2Parser::Global_atoms_annotation_beforeContext>(0);
}


size_t ASPCore2Parser::Global_atoms_annotation_beforeContext::getRuleIndex() const {
  return ASPCore2Parser::RuleGlobal_atoms_annotation_before;
}

void ASPCore2Parser::Global_atoms_annotation_beforeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGlobal_atoms_annotation_before(this);
}

void ASPCore2Parser::Global_atoms_annotation_beforeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGlobal_atoms_annotation_before(this);
}

ASPCore2Parser::Global_atoms_annotation_beforeContext* ASPCore2Parser::global_atoms_annotation_before() {
  Global_atoms_annotation_beforeContext *_localctx = _tracker.createInstance<Global_atoms_annotation_beforeContext>(_ctx, getState());
  enterRule(_localctx, 176, ASPCore2Parser::RuleGlobal_atoms_annotation_before);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(834);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(829);
      global_atom_annotation_before();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(830);
      global_atom_annotation_before();
      setState(831);
      match(ASPCore2Parser::COMMA);
      setState(832);
      global_atoms_annotation_before();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rule_atoms_annotation_afterContext ------------------------------------------------------------------

ASPCore2Parser::Rule_atoms_annotation_afterContext::Rule_atoms_annotation_afterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Rule_atom_annotation_afterContext* ASPCore2Parser::Rule_atoms_annotation_afterContext::rule_atom_annotation_after() {
  return getRuleContext<ASPCore2Parser::Rule_atom_annotation_afterContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Rule_atoms_annotation_afterContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

ASPCore2Parser::Rule_atoms_annotation_afterContext* ASPCore2Parser::Rule_atoms_annotation_afterContext::rule_atoms_annotation_after() {
  return getRuleContext<ASPCore2Parser::Rule_atoms_annotation_afterContext>(0);
}


size_t ASPCore2Parser::Rule_atoms_annotation_afterContext::getRuleIndex() const {
  return ASPCore2Parser::RuleRule_atoms_annotation_after;
}

void ASPCore2Parser::Rule_atoms_annotation_afterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRule_atoms_annotation_after(this);
}

void ASPCore2Parser::Rule_atoms_annotation_afterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRule_atoms_annotation_after(this);
}

ASPCore2Parser::Rule_atoms_annotation_afterContext* ASPCore2Parser::rule_atoms_annotation_after() {
  Rule_atoms_annotation_afterContext *_localctx = _tracker.createInstance<Rule_atoms_annotation_afterContext>(_ctx, getState());
  enterRule(_localctx, 178, ASPCore2Parser::RuleRule_atoms_annotation_after);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(841);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(836);
      rule_atom_annotation_after();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(837);
      rule_atom_annotation_after();
      setState(838);
      match(ASPCore2Parser::COMMA);
      setState(839);
      rule_atoms_annotation_after();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Global_atoms_annotation_afterContext ------------------------------------------------------------------

ASPCore2Parser::Global_atoms_annotation_afterContext::Global_atoms_annotation_afterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Global_atom_annotation_afterContext* ASPCore2Parser::Global_atoms_annotation_afterContext::global_atom_annotation_after() {
  return getRuleContext<ASPCore2Parser::Global_atom_annotation_afterContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Global_atoms_annotation_afterContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

std::vector<ASPCore2Parser::Global_atoms_annotation_afterContext *> ASPCore2Parser::Global_atoms_annotation_afterContext::global_atoms_annotation_after() {
  return getRuleContexts<ASPCore2Parser::Global_atoms_annotation_afterContext>();
}

ASPCore2Parser::Global_atoms_annotation_afterContext* ASPCore2Parser::Global_atoms_annotation_afterContext::global_atoms_annotation_after(size_t i) {
  return getRuleContext<ASPCore2Parser::Global_atoms_annotation_afterContext>(i);
}


size_t ASPCore2Parser::Global_atoms_annotation_afterContext::getRuleIndex() const {
  return ASPCore2Parser::RuleGlobal_atoms_annotation_after;
}

void ASPCore2Parser::Global_atoms_annotation_afterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGlobal_atoms_annotation_after(this);
}

void ASPCore2Parser::Global_atoms_annotation_afterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGlobal_atoms_annotation_after(this);
}

ASPCore2Parser::Global_atoms_annotation_afterContext* ASPCore2Parser::global_atoms_annotation_after() {
  Global_atoms_annotation_afterContext *_localctx = _tracker.createInstance<Global_atoms_annotation_afterContext>(_ctx, getState());
  enterRule(_localctx, 180, ASPCore2Parser::RuleGlobal_atoms_annotation_after);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(849);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(843);
      global_atom_annotation_after();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(844);
      global_atom_annotation_after();
      setState(845);
      match(ASPCore2Parser::COMMA);
      setState(846);
      global_atoms_annotation_after();
      setState(847);
      global_atoms_annotation_after();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_rule_partial_order_beginContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_rule_partial_order_beginContext::Annotation_rule_partial_order_beginContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_partial_order_beginContext::ANNOTATION_RULE_PARTIAL_ORDER() {
  return getToken(ASPCore2Parser::ANNOTATION_RULE_PARTIAL_ORDER, 0);
}


size_t ASPCore2Parser::Annotation_rule_partial_order_beginContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_rule_partial_order_begin;
}

void ASPCore2Parser::Annotation_rule_partial_order_beginContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_rule_partial_order_begin(this);
}

void ASPCore2Parser::Annotation_rule_partial_order_beginContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_rule_partial_order_begin(this);
}

ASPCore2Parser::Annotation_rule_partial_order_beginContext* ASPCore2Parser::annotation_rule_partial_order_begin() {
  Annotation_rule_partial_order_beginContext *_localctx = _tracker.createInstance<Annotation_rule_partial_order_beginContext>(_ctx, getState());
  enterRule(_localctx, 182, ASPCore2Parser::RuleAnnotation_rule_partial_order_begin);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(851);
    match(ASPCore2Parser::ANNOTATION_RULE_PARTIAL_ORDER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_global_partial_order_beginContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_global_partial_order_beginContext::Annotation_global_partial_order_beginContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_partial_order_beginContext::ANNOTATION_GLOBAL_PARTIAL_ORDER() {
  return getToken(ASPCore2Parser::ANNOTATION_GLOBAL_PARTIAL_ORDER, 0);
}


size_t ASPCore2Parser::Annotation_global_partial_order_beginContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_global_partial_order_begin;
}

void ASPCore2Parser::Annotation_global_partial_order_beginContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_global_partial_order_begin(this);
}

void ASPCore2Parser::Annotation_global_partial_order_beginContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_global_partial_order_begin(this);
}

ASPCore2Parser::Annotation_global_partial_order_beginContext* ASPCore2Parser::annotation_global_partial_order_begin() {
  Annotation_global_partial_order_beginContext *_localctx = _tracker.createInstance<Annotation_global_partial_order_beginContext>(_ctx, getState());
  enterRule(_localctx, 184, ASPCore2Parser::RuleAnnotation_global_partial_order_begin);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(853);
    match(ASPCore2Parser::ANNOTATION_GLOBAL_PARTIAL_ORDER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_rule_partial_orderContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_rule_partial_orderContext::Annotation_rule_partial_orderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Annotation_rule_partial_order_beginContext* ASPCore2Parser::Annotation_rule_partial_orderContext::annotation_rule_partial_order_begin() {
  return getRuleContext<ASPCore2Parser::Annotation_rule_partial_order_beginContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_partial_orderContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_partial_orderContext::ANNOTATION_PARTIAL_ORDER_BEFORE() {
  return getToken(ASPCore2Parser::ANNOTATION_PARTIAL_ORDER_BEFORE, 0);
}

std::vector<tree::TerminalNode *> ASPCore2Parser::Annotation_rule_partial_orderContext::EQUAL() {
  return getTokens(ASPCore2Parser::EQUAL);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_partial_orderContext::EQUAL(size_t i) {
  return getToken(ASPCore2Parser::EQUAL, i);
}

std::vector<tree::TerminalNode *> ASPCore2Parser::Annotation_rule_partial_orderContext::CURLY_OPEN() {
  return getTokens(ASPCore2Parser::CURLY_OPEN);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_partial_orderContext::CURLY_OPEN(size_t i) {
  return getToken(ASPCore2Parser::CURLY_OPEN, i);
}

ASPCore2Parser::Rule_atoms_annotation_beforeContext* ASPCore2Parser::Annotation_rule_partial_orderContext::rule_atoms_annotation_before() {
  return getRuleContext<ASPCore2Parser::Rule_atoms_annotation_beforeContext>(0);
}

std::vector<tree::TerminalNode *> ASPCore2Parser::Annotation_rule_partial_orderContext::CURLY_CLOSE() {
  return getTokens(ASPCore2Parser::CURLY_CLOSE);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_partial_orderContext::CURLY_CLOSE(size_t i) {
  return getToken(ASPCore2Parser::CURLY_CLOSE, i);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_partial_orderContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_partial_orderContext::ANNOTATION_PARTIAL_ORDER_AFTER() {
  return getToken(ASPCore2Parser::ANNOTATION_PARTIAL_ORDER_AFTER, 0);
}

ASPCore2Parser::Rule_atoms_annotation_afterContext* ASPCore2Parser::Annotation_rule_partial_orderContext::rule_atoms_annotation_after() {
  return getRuleContext<ASPCore2Parser::Rule_atoms_annotation_afterContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_partial_orderContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_partial_orderContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_rule_partial_orderContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_rule_partial_order;
}

void ASPCore2Parser::Annotation_rule_partial_orderContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_rule_partial_order(this);
}

void ASPCore2Parser::Annotation_rule_partial_orderContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_rule_partial_order(this);
}

ASPCore2Parser::Annotation_rule_partial_orderContext* ASPCore2Parser::annotation_rule_partial_order() {
  Annotation_rule_partial_orderContext *_localctx = _tracker.createInstance<Annotation_rule_partial_orderContext>(_ctx, getState());
  enterRule(_localctx, 186, ASPCore2Parser::RuleAnnotation_rule_partial_order);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(887);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(855);
      annotation_rule_partial_order_begin();
      setState(856);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(857);
      match(ASPCore2Parser::ANNOTATION_PARTIAL_ORDER_BEFORE);
      setState(858);
      match(ASPCore2Parser::EQUAL);
      setState(859);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(860);
      rule_atoms_annotation_before();
      setState(861);
      match(ASPCore2Parser::CURLY_CLOSE);
      setState(862);
      match(ASPCore2Parser::COMMA);
      setState(863);
      match(ASPCore2Parser::ANNOTATION_PARTIAL_ORDER_AFTER);
      setState(864);
      match(ASPCore2Parser::EQUAL);
      setState(865);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(866);
      rule_atoms_annotation_after();
      setState(867);
      match(ASPCore2Parser::CURLY_CLOSE);
      setState(868);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(869);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(871);
      annotation_rule_partial_order_begin();
      setState(872);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(873);
      match(ASPCore2Parser::ANNOTATION_PARTIAL_ORDER_AFTER);
      setState(874);
      match(ASPCore2Parser::EQUAL);
      setState(875);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(876);
      rule_atoms_annotation_after();
      setState(877);
      match(ASPCore2Parser::CURLY_CLOSE);
      setState(878);
      match(ASPCore2Parser::COMMA);
      setState(879);
      match(ASPCore2Parser::ANNOTATION_PARTIAL_ORDER_BEFORE);
      setState(880);
      match(ASPCore2Parser::EQUAL);
      setState(881);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(882);
      rule_atoms_annotation_before();
      setState(883);
      match(ASPCore2Parser::CURLY_CLOSE);
      setState(884);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(885);
      match(ASPCore2Parser::DOT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_global_partial_orderContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_global_partial_orderContext::Annotation_global_partial_orderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Annotation_global_partial_order_beginContext* ASPCore2Parser::Annotation_global_partial_orderContext::annotation_global_partial_order_begin() {
  return getRuleContext<ASPCore2Parser::Annotation_global_partial_order_beginContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_partial_orderContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_partial_orderContext::ANNOTATION_PARTIAL_ORDER_BEFORE() {
  return getToken(ASPCore2Parser::ANNOTATION_PARTIAL_ORDER_BEFORE, 0);
}

std::vector<tree::TerminalNode *> ASPCore2Parser::Annotation_global_partial_orderContext::EQUAL() {
  return getTokens(ASPCore2Parser::EQUAL);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_partial_orderContext::EQUAL(size_t i) {
  return getToken(ASPCore2Parser::EQUAL, i);
}

std::vector<tree::TerminalNode *> ASPCore2Parser::Annotation_global_partial_orderContext::CURLY_OPEN() {
  return getTokens(ASPCore2Parser::CURLY_OPEN);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_partial_orderContext::CURLY_OPEN(size_t i) {
  return getToken(ASPCore2Parser::CURLY_OPEN, i);
}

ASPCore2Parser::Global_atoms_annotation_beforeContext* ASPCore2Parser::Annotation_global_partial_orderContext::global_atoms_annotation_before() {
  return getRuleContext<ASPCore2Parser::Global_atoms_annotation_beforeContext>(0);
}

std::vector<tree::TerminalNode *> ASPCore2Parser::Annotation_global_partial_orderContext::CURLY_CLOSE() {
  return getTokens(ASPCore2Parser::CURLY_CLOSE);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_partial_orderContext::CURLY_CLOSE(size_t i) {
  return getToken(ASPCore2Parser::CURLY_CLOSE, i);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_partial_orderContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_partial_orderContext::ANNOTATION_PARTIAL_ORDER_AFTER() {
  return getToken(ASPCore2Parser::ANNOTATION_PARTIAL_ORDER_AFTER, 0);
}

ASPCore2Parser::Global_atoms_annotation_afterContext* ASPCore2Parser::Annotation_global_partial_orderContext::global_atoms_annotation_after() {
  return getRuleContext<ASPCore2Parser::Global_atoms_annotation_afterContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_partial_orderContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_partial_orderContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_global_partial_orderContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_global_partial_order;
}

void ASPCore2Parser::Annotation_global_partial_orderContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_global_partial_order(this);
}

void ASPCore2Parser::Annotation_global_partial_orderContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_global_partial_order(this);
}

ASPCore2Parser::Annotation_global_partial_orderContext* ASPCore2Parser::annotation_global_partial_order() {
  Annotation_global_partial_orderContext *_localctx = _tracker.createInstance<Annotation_global_partial_orderContext>(_ctx, getState());
  enterRule(_localctx, 188, ASPCore2Parser::RuleAnnotation_global_partial_order);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(921);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(889);
      annotation_global_partial_order_begin();
      setState(890);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(891);
      match(ASPCore2Parser::ANNOTATION_PARTIAL_ORDER_BEFORE);
      setState(892);
      match(ASPCore2Parser::EQUAL);
      setState(893);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(894);
      global_atoms_annotation_before();
      setState(895);
      match(ASPCore2Parser::CURLY_CLOSE);
      setState(896);
      match(ASPCore2Parser::COMMA);
      setState(897);
      match(ASPCore2Parser::ANNOTATION_PARTIAL_ORDER_AFTER);
      setState(898);
      match(ASPCore2Parser::EQUAL);
      setState(899);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(900);
      global_atoms_annotation_after();
      setState(901);
      match(ASPCore2Parser::CURLY_CLOSE);
      setState(902);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(903);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(905);
      annotation_global_partial_order_begin();
      setState(906);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(907);
      match(ASPCore2Parser::ANNOTATION_PARTIAL_ORDER_AFTER);
      setState(908);
      match(ASPCore2Parser::EQUAL);
      setState(909);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(910);
      global_atoms_annotation_after();
      setState(911);
      match(ASPCore2Parser::CURLY_CLOSE);
      setState(912);
      match(ASPCore2Parser::COMMA);
      setState(913);
      match(ASPCore2Parser::ANNOTATION_PARTIAL_ORDER_BEFORE);
      setState(914);
      match(ASPCore2Parser::EQUAL);
      setState(915);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(916);
      global_atoms_annotation_before();
      setState(917);
      match(ASPCore2Parser::CURLY_CLOSE);
      setState(918);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(919);
      match(ASPCore2Parser::DOT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_rule_projectionContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_rule_projectionContext::Annotation_rule_projectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_projectionContext::ANNOTATION_RULE_PROJECTION() {
  return getToken(ASPCore2Parser::ANNOTATION_RULE_PROJECTION, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_projectionContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_projectionContext::ANNOTATION_ORDERING_VALUE() {
  return getToken(ASPCore2Parser::ANNOTATION_ORDERING_VALUE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_projectionContext::EQUAL() {
  return getToken(ASPCore2Parser::EQUAL, 0);
}

ASPCore2Parser::Annotation_rule_projection_valueContext* ASPCore2Parser::Annotation_rule_projectionContext::annotation_rule_projection_value() {
  return getRuleContext<ASPCore2Parser::Annotation_rule_projection_valueContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_projectionContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_projectionContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_rule_projectionContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_rule_projection;
}

void ASPCore2Parser::Annotation_rule_projectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_rule_projection(this);
}

void ASPCore2Parser::Annotation_rule_projectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_rule_projection(this);
}

ASPCore2Parser::Annotation_rule_projectionContext* ASPCore2Parser::annotation_rule_projection() {
  Annotation_rule_projectionContext *_localctx = _tracker.createInstance<Annotation_rule_projectionContext>(_ctx, getState());
  enterRule(_localctx, 190, ASPCore2Parser::RuleAnnotation_rule_projection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(923);
    match(ASPCore2Parser::ANNOTATION_RULE_PROJECTION);
    setState(924);
    match(ASPCore2Parser::PARAM_OPEN);
    setState(925);
    match(ASPCore2Parser::ANNOTATION_ORDERING_VALUE);
    setState(926);
    match(ASPCore2Parser::EQUAL);
    setState(927);
    annotation_rule_projection_value();
    setState(928);
    match(ASPCore2Parser::PARAM_CLOSE);
    setState(929);
    match(ASPCore2Parser::DOT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_rule_projection_valueContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_rule_projection_valueContext::Annotation_rule_projection_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_projection_valueContext::NUMBER() {
  return getToken(ASPCore2Parser::NUMBER, 0);
}


size_t ASPCore2Parser::Annotation_rule_projection_valueContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_rule_projection_value;
}

void ASPCore2Parser::Annotation_rule_projection_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_rule_projection_value(this);
}

void ASPCore2Parser::Annotation_rule_projection_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_rule_projection_value(this);
}

ASPCore2Parser::Annotation_rule_projection_valueContext* ASPCore2Parser::annotation_rule_projection_value() {
  Annotation_rule_projection_valueContext *_localctx = _tracker.createInstance<Annotation_rule_projection_valueContext>(_ctx, getState());
  enterRule(_localctx, 192, ASPCore2Parser::RuleAnnotation_rule_projection_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(931);
    match(ASPCore2Parser::NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_rule_rewriting_arithContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_rule_rewriting_arithContext::Annotation_rule_rewriting_arithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_rewriting_arithContext::ANNOTATION_RULE_REWRITING_ARITH() {
  return getToken(ASPCore2Parser::ANNOTATION_RULE_REWRITING_ARITH, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_rewriting_arithContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_rewriting_arithContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_rewriting_arithContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_rule_rewriting_arithContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_rule_rewriting_arith;
}

void ASPCore2Parser::Annotation_rule_rewriting_arithContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_rule_rewriting_arith(this);
}

void ASPCore2Parser::Annotation_rule_rewriting_arithContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_rule_rewriting_arith(this);
}

ASPCore2Parser::Annotation_rule_rewriting_arithContext* ASPCore2Parser::annotation_rule_rewriting_arith() {
  Annotation_rule_rewriting_arithContext *_localctx = _tracker.createInstance<Annotation_rule_rewriting_arithContext>(_ctx, getState());
  enterRule(_localctx, 194, ASPCore2Parser::RuleAnnotation_rule_rewriting_arith);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(939);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(933);
      match(ASPCore2Parser::ANNOTATION_RULE_REWRITING_ARITH);
      setState(934);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(935);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(936);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(937);
      match(ASPCore2Parser::ANNOTATION_RULE_REWRITING_ARITH);
      setState(938);
      match(ASPCore2Parser::DOT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_rule_align_substitutionsContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_rule_align_substitutionsContext::Annotation_rule_align_substitutionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_align_substitutionsContext::ANNOTATION_RULE_ALIGN_SUBSTITUTIONS() {
  return getToken(ASPCore2Parser::ANNOTATION_RULE_ALIGN_SUBSTITUTIONS, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_align_substitutionsContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_align_substitutionsContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_align_substitutionsContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_rule_align_substitutionsContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_rule_align_substitutions;
}

void ASPCore2Parser::Annotation_rule_align_substitutionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_rule_align_substitutions(this);
}

void ASPCore2Parser::Annotation_rule_align_substitutionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_rule_align_substitutions(this);
}

ASPCore2Parser::Annotation_rule_align_substitutionsContext* ASPCore2Parser::annotation_rule_align_substitutions() {
  Annotation_rule_align_substitutionsContext *_localctx = _tracker.createInstance<Annotation_rule_align_substitutionsContext>(_ctx, getState());
  enterRule(_localctx, 196, ASPCore2Parser::RuleAnnotation_rule_align_substitutions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(947);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(941);
      match(ASPCore2Parser::ANNOTATION_RULE_ALIGN_SUBSTITUTIONS);
      setState(942);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(943);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(944);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(945);
      match(ASPCore2Parser::ANNOTATION_RULE_ALIGN_SUBSTITUTIONS);
      setState(946);
      match(ASPCore2Parser::DOT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_rule_look_aheadContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_rule_look_aheadContext::Annotation_rule_look_aheadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_look_aheadContext::ANNOTATION_RULE_LOOK_AHEAD() {
  return getToken(ASPCore2Parser::ANNOTATION_RULE_LOOK_AHEAD, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_look_aheadContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_look_aheadContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_rule_look_aheadContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_rule_look_aheadContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_rule_look_ahead;
}

void ASPCore2Parser::Annotation_rule_look_aheadContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_rule_look_ahead(this);
}

void ASPCore2Parser::Annotation_rule_look_aheadContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_rule_look_ahead(this);
}

ASPCore2Parser::Annotation_rule_look_aheadContext* ASPCore2Parser::annotation_rule_look_ahead() {
  Annotation_rule_look_aheadContext *_localctx = _tracker.createInstance<Annotation_rule_look_aheadContext>(_ctx, getState());
  enterRule(_localctx, 198, ASPCore2Parser::RuleAnnotation_rule_look_ahead);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(955);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(949);
      match(ASPCore2Parser::ANNOTATION_RULE_LOOK_AHEAD);
      setState(950);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(951);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(952);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(953);
      match(ASPCore2Parser::ANNOTATION_RULE_LOOK_AHEAD);
      setState(954);
      match(ASPCore2Parser::DOT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_global_wasp_propagatorContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_global_wasp_propagatorContext::Annotation_global_wasp_propagatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Annotation_global_wasp_propagator_beginContext* ASPCore2Parser::Annotation_global_wasp_propagatorContext::annotation_global_wasp_propagator_begin() {
  return getRuleContext<ASPCore2Parser::Annotation_global_wasp_propagator_beginContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_propagatorContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_propagatorContext::ANNOTATION_GLOBAL_WASP_HEURISTIC_FILE() {
  return getToken(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC_FILE, 0);
}

std::vector<tree::TerminalNode *> ASPCore2Parser::Annotation_global_wasp_propagatorContext::EQUAL() {
  return getTokens(ASPCore2Parser::EQUAL);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_propagatorContext::EQUAL(size_t i) {
  return getToken(ASPCore2Parser::EQUAL, i);
}

ASPCore2Parser::Heuristic_python_fileContext* ASPCore2Parser::Annotation_global_wasp_propagatorContext::heuristic_python_file() {
  return getRuleContext<ASPCore2Parser::Heuristic_python_fileContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_propagatorContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_propagatorContext::ANNOTATION_GLOBAL_WASP_HEURISTIC_ELEMENTS() {
  return getToken(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC_ELEMENTS, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_propagatorContext::CURLY_OPEN() {
  return getToken(ASPCore2Parser::CURLY_OPEN, 0);
}

ASPCore2Parser::Aggregate_elements_heuristicContext* ASPCore2Parser::Annotation_global_wasp_propagatorContext::aggregate_elements_heuristic() {
  return getRuleContext<ASPCore2Parser::Aggregate_elements_heuristicContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_propagatorContext::CURLY_CLOSE() {
  return getToken(ASPCore2Parser::CURLY_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_propagatorContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_propagatorContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_global_wasp_propagatorContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_global_wasp_propagator;
}

void ASPCore2Parser::Annotation_global_wasp_propagatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_global_wasp_propagator(this);
}

void ASPCore2Parser::Annotation_global_wasp_propagatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_global_wasp_propagator(this);
}

ASPCore2Parser::Annotation_global_wasp_propagatorContext* ASPCore2Parser::annotation_global_wasp_propagator() {
  Annotation_global_wasp_propagatorContext *_localctx = _tracker.createInstance<Annotation_global_wasp_propagatorContext>(_ctx, getState());
  enterRule(_localctx, 200, ASPCore2Parser::RuleAnnotation_global_wasp_propagator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(985);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(957);
      annotation_global_wasp_propagator_begin();
      setState(958);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(959);
      match(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC_FILE);
      setState(960);
      match(ASPCore2Parser::EQUAL);
      setState(961);
      heuristic_python_file();
      setState(962);
      match(ASPCore2Parser::COMMA);
      setState(963);
      match(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC_ELEMENTS);
      setState(964);
      match(ASPCore2Parser::EQUAL);
      setState(965);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(966);
      aggregate_elements_heuristic();
      setState(967);
      match(ASPCore2Parser::CURLY_CLOSE);
      setState(968);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(969);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(971);
      annotation_global_wasp_propagator_begin();
      setState(972);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(973);
      match(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC_ELEMENTS);
      setState(974);
      match(ASPCore2Parser::EQUAL);
      setState(975);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(976);
      aggregate_elements_heuristic();
      setState(977);
      match(ASPCore2Parser::CURLY_CLOSE);
      setState(978);
      match(ASPCore2Parser::COMMA);
      setState(979);
      match(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC_FILE);
      setState(980);
      match(ASPCore2Parser::EQUAL);
      setState(981);
      heuristic_python_file();
      setState(982);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(983);
      match(ASPCore2Parser::DOT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_global_wasp_propagator_beginContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_global_wasp_propagator_beginContext::Annotation_global_wasp_propagator_beginContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_propagator_beginContext::ANNOTATION_GLOBAL_WASP_PROPAGATOR() {
  return getToken(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_PROPAGATOR, 0);
}


size_t ASPCore2Parser::Annotation_global_wasp_propagator_beginContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_global_wasp_propagator_begin;
}

void ASPCore2Parser::Annotation_global_wasp_propagator_beginContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_global_wasp_propagator_begin(this);
}

void ASPCore2Parser::Annotation_global_wasp_propagator_beginContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_global_wasp_propagator_begin(this);
}

ASPCore2Parser::Annotation_global_wasp_propagator_beginContext* ASPCore2Parser::annotation_global_wasp_propagator_begin() {
  Annotation_global_wasp_propagator_beginContext *_localctx = _tracker.createInstance<Annotation_global_wasp_propagator_beginContext>(_ctx, getState());
  enterRule(_localctx, 202, ASPCore2Parser::RuleAnnotation_global_wasp_propagator_begin);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(987);
    match(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_PROPAGATOR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_global_wasp_heuristicContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_global_wasp_heuristicContext::Annotation_global_wasp_heuristicContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Annotation_global_wasp_heuristic_beginContext* ASPCore2Parser::Annotation_global_wasp_heuristicContext::annotation_global_wasp_heuristic_begin() {
  return getRuleContext<ASPCore2Parser::Annotation_global_wasp_heuristic_beginContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_heuristicContext::PARAM_OPEN() {
  return getToken(ASPCore2Parser::PARAM_OPEN, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_heuristicContext::ANNOTATION_GLOBAL_WASP_HEURISTIC_FILE() {
  return getToken(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC_FILE, 0);
}

std::vector<tree::TerminalNode *> ASPCore2Parser::Annotation_global_wasp_heuristicContext::EQUAL() {
  return getTokens(ASPCore2Parser::EQUAL);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_heuristicContext::EQUAL(size_t i) {
  return getToken(ASPCore2Parser::EQUAL, i);
}

ASPCore2Parser::Heuristic_python_fileContext* ASPCore2Parser::Annotation_global_wasp_heuristicContext::heuristic_python_file() {
  return getRuleContext<ASPCore2Parser::Heuristic_python_fileContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_heuristicContext::COMMA() {
  return getToken(ASPCore2Parser::COMMA, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_heuristicContext::ANNOTATION_GLOBAL_WASP_HEURISTIC_ELEMENTS() {
  return getToken(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC_ELEMENTS, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_heuristicContext::CURLY_OPEN() {
  return getToken(ASPCore2Parser::CURLY_OPEN, 0);
}

ASPCore2Parser::Aggregate_elements_heuristicContext* ASPCore2Parser::Annotation_global_wasp_heuristicContext::aggregate_elements_heuristic() {
  return getRuleContext<ASPCore2Parser::Aggregate_elements_heuristicContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_heuristicContext::CURLY_CLOSE() {
  return getToken(ASPCore2Parser::CURLY_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_heuristicContext::PARAM_CLOSE() {
  return getToken(ASPCore2Parser::PARAM_CLOSE, 0);
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_heuristicContext::DOT() {
  return getToken(ASPCore2Parser::DOT, 0);
}


size_t ASPCore2Parser::Annotation_global_wasp_heuristicContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_global_wasp_heuristic;
}

void ASPCore2Parser::Annotation_global_wasp_heuristicContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_global_wasp_heuristic(this);
}

void ASPCore2Parser::Annotation_global_wasp_heuristicContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_global_wasp_heuristic(this);
}

ASPCore2Parser::Annotation_global_wasp_heuristicContext* ASPCore2Parser::annotation_global_wasp_heuristic() {
  Annotation_global_wasp_heuristicContext *_localctx = _tracker.createInstance<Annotation_global_wasp_heuristicContext>(_ctx, getState());
  enterRule(_localctx, 204, ASPCore2Parser::RuleAnnotation_global_wasp_heuristic);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1017);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(989);
      annotation_global_wasp_heuristic_begin();
      setState(990);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(991);
      match(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC_FILE);
      setState(992);
      match(ASPCore2Parser::EQUAL);
      setState(993);
      heuristic_python_file();
      setState(994);
      match(ASPCore2Parser::COMMA);
      setState(995);
      match(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC_ELEMENTS);
      setState(996);
      match(ASPCore2Parser::EQUAL);
      setState(997);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(998);
      aggregate_elements_heuristic();
      setState(999);
      match(ASPCore2Parser::CURLY_CLOSE);
      setState(1000);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(1001);
      match(ASPCore2Parser::DOT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1003);
      annotation_global_wasp_heuristic_begin();
      setState(1004);
      match(ASPCore2Parser::PARAM_OPEN);
      setState(1005);
      match(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC_ELEMENTS);
      setState(1006);
      match(ASPCore2Parser::EQUAL);
      setState(1007);
      match(ASPCore2Parser::CURLY_OPEN);
      setState(1008);
      aggregate_elements_heuristic();
      setState(1009);
      match(ASPCore2Parser::CURLY_CLOSE);
      setState(1010);
      match(ASPCore2Parser::COMMA);
      setState(1011);
      match(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC_FILE);
      setState(1012);
      match(ASPCore2Parser::EQUAL);
      setState(1013);
      heuristic_python_file();
      setState(1014);
      match(ASPCore2Parser::PARAM_CLOSE);
      setState(1015);
      match(ASPCore2Parser::DOT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Annotation_global_wasp_heuristic_beginContext ------------------------------------------------------------------

ASPCore2Parser::Annotation_global_wasp_heuristic_beginContext::Annotation_global_wasp_heuristic_beginContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Annotation_global_wasp_heuristic_beginContext::ANNOTATION_GLOBAL_WASP_HEURISTIC() {
  return getToken(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC, 0);
}


size_t ASPCore2Parser::Annotation_global_wasp_heuristic_beginContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAnnotation_global_wasp_heuristic_begin;
}

void ASPCore2Parser::Annotation_global_wasp_heuristic_beginContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnnotation_global_wasp_heuristic_begin(this);
}

void ASPCore2Parser::Annotation_global_wasp_heuristic_beginContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnnotation_global_wasp_heuristic_begin(this);
}

ASPCore2Parser::Annotation_global_wasp_heuristic_beginContext* ASPCore2Parser::annotation_global_wasp_heuristic_begin() {
  Annotation_global_wasp_heuristic_beginContext *_localctx = _tracker.createInstance<Annotation_global_wasp_heuristic_beginContext>(_ctx, getState());
  enterRule(_localctx, 206, ASPCore2Parser::RuleAnnotation_global_wasp_heuristic_begin);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1019);
    match(ASPCore2Parser::ANNOTATION_GLOBAL_WASP_HEURISTIC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Heuristic_python_fileContext ------------------------------------------------------------------

ASPCore2Parser::Heuristic_python_fileContext::Heuristic_python_fileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ASPCore2Parser::Heuristic_python_fileContext::STRING() {
  return getToken(ASPCore2Parser::STRING, 0);
}


size_t ASPCore2Parser::Heuristic_python_fileContext::getRuleIndex() const {
  return ASPCore2Parser::RuleHeuristic_python_file;
}

void ASPCore2Parser::Heuristic_python_fileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHeuristic_python_file(this);
}

void ASPCore2Parser::Heuristic_python_fileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHeuristic_python_file(this);
}

ASPCore2Parser::Heuristic_python_fileContext* ASPCore2Parser::heuristic_python_file() {
  Heuristic_python_fileContext *_localctx = _tracker.createInstance<Heuristic_python_fileContext>(_ctx, getState());
  enterRule(_localctx, 208, ASPCore2Parser::RuleHeuristic_python_file);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1021);
    match(ASPCore2Parser::STRING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Aggregate_element_heuristicContext ------------------------------------------------------------------

ASPCore2Parser::Aggregate_element_heuristicContext::Aggregate_element_heuristicContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Aggregate_elementContext* ASPCore2Parser::Aggregate_element_heuristicContext::aggregate_element() {
  return getRuleContext<ASPCore2Parser::Aggregate_elementContext>(0);
}

ASPCore2Parser::Classic_literalContext* ASPCore2Parser::Aggregate_element_heuristicContext::classic_literal() {
  return getRuleContext<ASPCore2Parser::Classic_literalContext>(0);
}


size_t ASPCore2Parser::Aggregate_element_heuristicContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAggregate_element_heuristic;
}

void ASPCore2Parser::Aggregate_element_heuristicContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAggregate_element_heuristic(this);
}

void ASPCore2Parser::Aggregate_element_heuristicContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAggregate_element_heuristic(this);
}

ASPCore2Parser::Aggregate_element_heuristicContext* ASPCore2Parser::aggregate_element_heuristic() {
  Aggregate_element_heuristicContext *_localctx = _tracker.createInstance<Aggregate_element_heuristicContext>(_ctx, getState());
  enterRule(_localctx, 210, ASPCore2Parser::RuleAggregate_element_heuristic);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1025);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1023);
      aggregate_element();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1024);
      classic_literal();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Aggregate_elements_heuristicContext ------------------------------------------------------------------

ASPCore2Parser::Aggregate_elements_heuristicContext::Aggregate_elements_heuristicContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ASPCore2Parser::Aggregate_element_heuristicContext* ASPCore2Parser::Aggregate_elements_heuristicContext::aggregate_element_heuristic() {
  return getRuleContext<ASPCore2Parser::Aggregate_element_heuristicContext>(0);
}

tree::TerminalNode* ASPCore2Parser::Aggregate_elements_heuristicContext::SEMICOLON() {
  return getToken(ASPCore2Parser::SEMICOLON, 0);
}

ASPCore2Parser::Aggregate_elements_heuristicContext* ASPCore2Parser::Aggregate_elements_heuristicContext::aggregate_elements_heuristic() {
  return getRuleContext<ASPCore2Parser::Aggregate_elements_heuristicContext>(0);
}


size_t ASPCore2Parser::Aggregate_elements_heuristicContext::getRuleIndex() const {
  return ASPCore2Parser::RuleAggregate_elements_heuristic;
}

void ASPCore2Parser::Aggregate_elements_heuristicContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAggregate_elements_heuristic(this);
}

void ASPCore2Parser::Aggregate_elements_heuristicContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ASPCore2Listener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAggregate_elements_heuristic(this);
}

ASPCore2Parser::Aggregate_elements_heuristicContext* ASPCore2Parser::aggregate_elements_heuristic() {
  Aggregate_elements_heuristicContext *_localctx = _tracker.createInstance<Aggregate_elements_heuristicContext>(_ctx, getState());
  enterRule(_localctx, 212, ASPCore2Parser::RuleAggregate_elements_heuristic);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1032);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1027);
      aggregate_element_heuristic();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1028);
      aggregate_element_heuristic();
      setState(1029);
      match(ASPCore2Parser::SEMICOLON);
      setState(1030);
      aggregate_elements_heuristic();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void ASPCore2Parser::initialize() {
  std::call_once(aspcore2ParserOnceFlag, aspcore2ParserInitialize);
}
